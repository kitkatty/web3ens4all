{"version":3,"mappings":"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","names":["ContractAddressesMainnetEnum","bulkRegistrationMainnet","acceptedCurrenciesMainnet","ContractAddressesTestnetEnum","bulkRegistrationTestnet","acceptedCurrenciesTestnet","currency","address","ETH","decimals","decimalRepresentation","highValueAsset","DAI","USDT","WBTC","SupportedCurrenciesEnum","ENSContracts","registrar","resolver","registrarController","migrationContract","nullResolver","payNoMarketAddress","BlockExplorersEnum","BUTTON","PROCEED","DISMISS","CONNECT","CONNECT_WALLET","DISCONNECT","LOGOUT","CLOSE","LAUNCH_APP","CONNECT_TO_PROCEED","VIEW_DETAILS","REFRESH","START_REGISTRATION","CANCEL","PRESS_ENTER","LEARN_MORE","CLOSE_WINDOW","SHOW_AVAILABLE_ONLY","SHOW_AVAILABLE","PROCEED_SEARCH","DOWNLOAD","SHOW_ALL","DESELECT_ALL","SHOW_SELCTED","LINK","CUSTOM_LINK","SET_QR_LINK_ALL","SET_QR_LINK","DISABLE_ALL","DISABLE_QR_CODE","ENABLE_QR_CODE","SET_QR_COLOR","SET_COLOR","SET_ALL_COLORS","SET_PRICE","SET_PRICE_ALL","RESET","CHECK_PROFILE","GO_TO_DASHBOARD","GO_TO_HOME","VIEW_PROFILE","CHECK_DOMAINS","TRANSACTION_DETAILS","BUY_NOW","HEADER","FAQ","BACK_TO_HOME","HELP_SUPPORT","CANCEL_REGISTRATION","PROFILE","SETTINGS","DOCS","DOCUMENTATIONS","CART","BOOKMARKS","IPFS","INITIALISING","FINDING_PEERS","FAILED","READY","PUBLISHING","EVENTS","TRANSFER","REGISTRATION","RENEWAL","SALE","MINT","BURN","GENERIC","NETWORK_CHANGED_INCOMPATIBLE","IPNS_PUBLISHING_COMPLETED","PENDING_TRANSACTION_CERATED","LABELS","SEARCH","CONTAIN_ALPHABET","CONTAIN_NUMBERS","CONTAIN_EMOJI","MIN_LENGTH","MAX_LENGTH","CONTAINING_KEYWORDS","FILTERS","DOMAINS","DOMAIN_HISTORY","EXPIRATION_DATE","REGISTRATION_DATE","CREATION_DATE","DETAILS","YOUR_DOMAINS","PROCESSING","LAYOUT","ENTER_SUFFIX","ENTER_PREFIX","CLICK","CONNECT_TO_START","TIP","ADVANCED_SEARCH_TIP","ADVANCED_SEARCH","ADVANCED_MODE","REGISTER_DOMAINS_TO","NO_DOMAINS_SELECTED","FIND_AND_REGISTER","SELECTED_DOMAINS","REGISTER","SEARCH_RESULTS","PROCEED_TO_REGISTRATION","REGISTER_DOMAINS","REGISTRANT_ADDRESS","SET_RESOLVER","TOTAL_COST","GAS_PRICE","NO_ADDRESS_DETECTED","DURATION","BEFORE_COMMIT","COMMIT_SENT","COMMIT_COMPLETE","AWAIT","BEFORE_REGISTRATION","REGISTRATION_SENT","REGISTRATION_COMPLETE","REGISTRATION_COMPLETE_TITLE","YOUR_DOMAINS_HAVE_NOW_BEEN_REGISTERED","BASKET_EMPTY","PLEASE_SELECT_DOMAINS_TO_REGISTER","PAYMENT","PAYMENT_CANCELLED","SPINNER","NO_DATA_TO_DISPLAY","PERFORMING_SEARCH","LOADING_DATA","FOLLOW_THE_INSTRUCTIONS_ON_YOUR_WALLET","FORM_LABELS","ENTER_DURATION","ENTER_QR_LINK","ENTER_PRICE","ENTER_CUSTOM_ADDRESS","FORM_ERRORS","INVALID_DURATION","INVALID_QR_LINK","INVALID_PRICE","validTranslations","en","EN","HammerJsConf","HammerGestureConfig","constructor","this","swipe","velocity","threshold","t","factory","generalConfigurations","version","defaultLanguage","defaultPage","PagesEnum","maximumDecimalInPrices","maxAttemptsToCheckoutData","sessionTimeout","maxRPCCallRetries","timeUntilImageLoadErrors","timeToUpdateCheckoutPipe","timeToUpdateRegistrationGasPrice","timeUntilCheckoutExpires","maxConfirmationsUntilTxFinal","declarePaymentStatusUnkownUntilXFailedDataFetches","maxCheckoutRetryUntilRehydrateProcessId","maxIpfsSubscriptionRetries","maxDomainsToRegister","defaultCurrency","docsLink","blockscanLink","trezorManifest","email","appUrl","appMeta","description","url","icons","name","wallectConnectSupportedWallets","check","confetti","cart_empty","llayers","spin","infiniteLoopedIcons","imageToPreload","priceOracles","CRYPTO_COMPARE","BINANCE","POLONIEX","HUOBI","EnsEventsEnum","EnsEvensSymbolEnum","UserStoreErrorsEnum","serviceProviders","UserService","UserSessionService","UserFacadeService","PagesFacadeService","NavigatorFacadeService","NavigatorButtonsFacadeService","FormValidationService","MiscUtilsService","TranslationService","FormatTimePipe","TimeAgoPipe","HttpClient","EnsService","RegistrationDataService","BookmarksServiceService","RegistrationServiceService","PaymentStorageService","WalletConnectService","DownloadService","routerPaths","canvas","bootstrap","home","checkout","notfound","profile","domain","PaymentErrorCodes","PaymentTypesEnum","NonceTypesEnum","WalletTypesEnum","IconModule","imports","TranslationModule","MatDialogModule","MatButtonModule","FlexLayoutModule","CustomAddressDialogModule","ReactiveFormsModule","CommonModule","FormsModule","MatIconModule","MatFormFieldModule","MatInputModule","GenericDialogModule","OnboardDialogModule","SharedModule","SpinnerCustomModule","BulkSearchModule","MatSlideToggleModule","MatProgressBarModule","BlockyModule","MainHeaderModule","MatBadgeModule","MatMenuModule","MatAutocompleteModule","DatePipe","transform","value","inputDate","Date","super","pure","TimeAgo","timeAgo","format","parseInt","provide","HAMMER_GESTURE_CONFIG","useClass","MAT_PROGRESS_BAR_DEFAULT_OPTIONS","useValue","MAT_BOTTOM_SHEET_DATA","MAT_DIALOG_DATA","MatDialogRef","HttpClientModule","RouterModule","MatBottomSheetModule","MatExpansionModule","MatChipsModule","MatSelectModule","MatTabsModule","MatCardModule","MatDividerModule","MatRadioModule","MatStepperModule","MatCheckboxModule","MatSliderModule","MatRippleModule","MatProgressSpinnerModule","MatTableModule","MatListModule","MatTooltipModule","MatDatepickerModule","MatNativeDateModule","MatSnackBarModule","DragDropModule","OverlayModule","QRCodeModule","NgxColorsModule","countBookmarks","loadBookmarksAndFeed","length","loadBookmarks","localStorage","getItem","sBookmarks","JSON","parse","saveBookmark","domainData","bookmarksRaw","reduce","accumulator","labelName","bKeys","Object","keys","bookmarks","Set","map","k","push","setItem","stringify","removeBookmark","domainName","bookmarksUpdated","filter","d","clearBookmarks","isDomainBookmarked","CurrencyService","deriveCurrencyAddressFromName","currencies","environment","toUpperCase","deriveCurrencyDataFromCurrencyName","currencySearched","c","convertAmountToDecimal","amountInString","paymentCurrency","currencyData","bnAmount","BigNumber","ethers","convertAmountToToken","getSupportedCurrencies","determineDefaultCurrencyForPayment","searchType","chooseSecondDefault","secondDefaultToBeChosen","CurrencyExchangeService","oracleKey","oracles","binanceQueryResultParse","payload","newPrices","symbol","ticker","price","parseFloat","toFixed","poloniexQueryResultParse","pricesContained","priceTickerKeys","normalizedTicker","replace","last","huobiQueryResultParse","data","ask","cryptoCompareQueryResultParse","selectOracle","getEthUsdPrice","values","ethUsdPriceOraclesList","oracleKeys","isResolved","Subject","oracleToResolve","of","pipe","takeUntil","switchMap","o","from","fetch","r","undefined","json","result","parsedResult","ethUsdPrice","findEthUsdPairInOracle","next","retryWhen","error","delayWhen","e","timer","mistUtils","download","meta","dataRaw","TextEncoder","encode","blob","Blob","type","fileURL","URL","createObjectURL","window","open","i0","http","getDomainMetadata","domainHash","get","ensMetadataAPI","findDomains","domains","ensGraphQLAPI","Observable","observer","query","gql","request","domainNames","then","complete","getDomain","downloadDomainsListCSV","finalForm","join","kk","calculateExpiry","expiryDate","eDate","getTime","calculateGracePeriodPercentage","timeUtilGraceEnds","gracePeriod","isDomainNameNotValid","ens_normalize","calculateDomainsPrice","ethToUsdRate","duration","ethUsdRate","nameCost","markFormGroupTouched","formGroup","controls","forEach","control","markAsTouched","PathResolveService","resolve","route","state","typoPath","getThreshold","dictionary","path","Math","abs","sortByDistances","pathsDistance","sort","a","b","levenshtein","matrix","i","j","charAt","min","TrezorService","miscUtils","pagesFacade","connect","time","TrezorConnect","lazyLoad","webusb","popup","manifest","coin","descriptor","catch","signPayment","accountInfo","transaction","nonce","toHexString","signed","success","utils","v","toNumber","s","getWeb3Provider","detectEthereumProvider","p","IconRegistryService","injectCustomIcons","perloadCustomIcons","ic","ici","Image","src","PaymentEffectsService","recordLastConnectionAddress","connectionAddress","getLastConnectionAddress","lConnectionAddres","Intercept","router","userFacade","intercept","req","handle","LedgerService","TransportUSB","transport","ledger","LedgerEth","getAddress","createTransport","signTransaction","substring","MetamaskService","userFacadeService","getAccounts","catchError","chainChangedDetectionDaemon","ethereum","on","chainId","setNetworkChainCode","getChainId","networkVersion","method","accounts","Ethers","payloadHash","params","tx","roundUp","num","roundTo","round","testJSON","str","toString","checksumEtheruemAddress","toLowerCase","commafied","indexOf","parts","split","prependToArray","array","newArray","slice","unshift","toHex","rb","testNumeric","RegExp","testAlphaNumeric","testAlpha","testEmoji","testIntNumeric","PaymentStoreErrorsEnum","PaymentErrorService","getPaymentErrorTranslatedTextKey","paymentError","getPaymentErrorEnumKey","errorCode","globalAny","networkName","savePayments","paymentData","loadPayments","l","PaymentService","userService","currencyService","walletService","prepareTransaction","toAddress","gasLimit","gasPrice","payment","to","paymentTotal","paymentAbstractBytesSlot","resolveAddressOfEth","provider","walletAddress","resolveName","n","getWalletNonce","getTransactionCount","getGasPrice","getFeeData","feeData","ENSBulkRegistrationContractMainnetABI","inputs","components","internalType","outputs","stateMutability","constant","payable","ENSBulkRegistrationContractTestnetABI","RegistrationFacilityService","miscUtilsService","paymentService","registrationDomainsToCommitmentPacket","owner","secret","commitments","compiled","nc","reverseRecord","fuses","wrapperExpiry","metadata","commitmentPacketToRegistrationDomains","decompiled","createRegistrationCommitmentPacket","contract","getEnsBulkRegistrationContract","comitmentsPrepared","nCP","isResolverSet","commitmentResult","createCommitmentsForRegistration","getGasLimitEstimation","toPromise","priceRanges","createRegistrationRequestPaymentPacket","commitmentsPrepared","interface","encodeFunctionData","decodeRegistrationPacket","abstractData","parseTransaction","completeRegistration","totalCost","names","namesLengths","dataInput","preparedTx","bulkRegistrationContractAddress","Contract","BulkRegistrationContractABI","providerFunction","estimateGas","EnsTestnetABI","anonymous","indexed","EnsABI","EnsRegistrarControllerTestnetABI","EnsRegistrarControllerABI","martketSaleTopics","SEAPORT","RARIBLE","X2Y2","LOOKSRARE","SortableMarkets","resolevTxType","relatedNameLabelHash","marketTopics","markets","qualifiedTx","logs","topics","includes","resolvedEventType","labelHashInHex","paymentNoAddressBytes","topicNormalised","x","whichMarket","marketBuyer","getMarketBuyer","marketSeller","getMarketSeller","txHash","transactionHash","txValueToEther","date","timestamp","registrant","Y","uniqueSet","filteredEvents","re","isDuplicate","has","add","market","eventWholeData","event","match","getENSContract","ensContractABI","getENSRegistrarControllerContract","ensRegistrarControllerContractABI","snackBar","countRegistrations","loadRegistrationsAndFeed","loadRegistrations","sRegistrations","saveRegistrations","horizontalPosition","verticalPosition","registrationsRaw","registrations","removeRegistration","registrationsUpdated","removeAllRegistrations","isDomainOnRegistrationList","TranslationPipe","translationService","language","getLanguage","translations","getTranslation","keysSplit","default","currentKey","key","lang","navigator","getLocale","getCacheableLanguagekeys","translation","getText","getUserDomains","getEthAddress","ethName","getEthName","lookupAddress","getUserText","text","getResolver","getUserContentHash","getContentHash","web2Link","metamaskService","quitUserSession","removeItem","saveUserSession","userData","loadUserSession","getUserSessionProvider","createAlchemyFrontProvider","getDefaultChainId","chain","providers","providerKey","ngZone","dateNow","walletConnect","connector","WalletConnect","bridge","qrcodeModal","QRCodeModal","qrcodeModalOptions","mobileLinks","desktopLinks","clientMeta","removeUser","wc","killSession","setErrorState","chainAccount","gotoPageRoute","createSession","account","registerUser","walletType","sendTransaction","WalletService","produceNonce","nonceLength","charLibrary","nonceString","rnum","floor","random","validateWalletAddress","test","AddOneENSBookmark","UpdateENSBookmark","UpsertOneENSBookmark","UpsertManyENSBookmark","RemoveOneENSBookmark","RemoveManyENSBookmark","RemoveAllENSBookmark","SetENSBookmarkError","toSave","AddOneENSRegistration","UpdateENSRegistration","UpsertOneENSRegistration","UpsertManyENSRegistration","RemoveOneENSRegistration","RemoveManyENSRegistration","RemoveAllENSRegistration","SetENSRegistrationError","SetNavigatorButtonsState","GetNavigatorButtonsState","SetNavigatorState","GetNavigatorState","ShowLoadingProgressBarOnLoad","HideLoadingProgressBarOnLoadFinished","SetPagesCriticalError","SetPagesPageSlide","SetPagesState","SetPageIpfsErrors","SetPageIpfsState","SetPageChainCode","SetPagesNewPageState","SetPagesNetworkState","SetPagesVisibility","SetPagesNetworkStateOffline","GetPagesState","GotoPageRoute","redirect","firstTimeSet","PaymentCheckFulfilled","AddOnePayment","UpdatePayment","UpsertOnePayment","UpsertManyPayment","SetEthUSDRates","RemoveOnePayment","RemoveManyPayment","RemoveAllPayment","ArchiveAllPayment","SetPaymentError","SetUserState","SetUserError","GetUserState","RemoveUserError","RemoveUserState","RemoveUser","AddUser","UpdateUser","RegisterUser","store","userState$","select","getCurrentUserState","user$","getCurrentUser","dispatch","UserRegister","newUserState","userState","UserStateSet","removeUserState","UserStateRemove","UserRemove","removeUserStateError","UserErrorRemove","UserErrorSet","addUser","userAddData","UserAdd","updateUser","UserUpdate","PaymentFacadeService","paymentState$","getPaymentState","pendingPayments$","getPendingPayments","paymentsStoreError$","getPaymentStateError","paymentsStoreLoading$","getPaymentStateLoading","ethUsdPrice$","createPayment","PaymentAddOne","removePayment","PaymentRemoveOne","paymentSerial","removePayments","payments","PaymentRemoveMany","archiveAllPayment","PaymentArchiveAll","upsertPayment","PaymentUpsertOne","updatePayment","PaymentUpdate","getPayment","paymentId","selectPayment","getPayments","removePaymentStateError","PaymentErrorSet","ENSBookmarkFacadeService","getENSBookmarkState$","getENSBookmarkState","addBookmark","bookmark","ENSBookmarkAddOne","ENSBookmarkRemoveOne","id","removeBookmarks","ENSBookmarkRemoveMany","upsertBookmark","ENSBookmarkUpsertOne","updateBookmark","ENSBookmarkUpdate","getBookmark","bookmarkId","selectENSBookmark","getBookmarks","getENSBookmarks","removeBookmarkStateError","ENSBookmarkErrorSet","ENSRegistrationFacadeService","getENSRegistrationState$","getENSRegistrationState","addRegistration","registration","ENSRegistrationAddOne","ENSRegistrationRemoveOne","removeRegistrations","ENSRegistrationRemoveMany","ENSRegistrationRemoveAll","upsertRegistration","ENSRegistrationUpsertOne","updateRegistration","ENSRegistrationUpdate","getRegistration","registrationId","selectENSRegistration","getRegistrations","getENSRegistrations","removeRegistrationStateError","ENSRegistrationErrorSet","disabledButtonnavigatorState$","getCurrentNavigatorButtonsState","newNavigatorButtonsState","navigatorState","setTimeout","NavigatorButtonsStateSet","resetNavigatorButtonState","initialNavigatorButtonsState","navigatorState$","getCurrentNavigatorState","newNavigatorState","NavigatorStateSet","resetNavigatorState","initialNavigatorState","navigatorFacade","navigatorButtonFacade","dialog","pagesState$","getCurrentPagesState","pageErrorCode$","getCurrentErrorCode","pagesIpfsState$","getIpfsState","pagesIpfsError$","getIpfsError","pageLoadingState$","getCurrentPageLoadState","pageCritiaclError$","getCriticalErrorState","pageVisibility$","getCurrentPageVisibility","showLoadingProgressBar","PagesShowLoadingProgressBarOnLoad","setPageCriticalError","errorOccured","PagesSetCriticalError","setIpfsError","PagesSetIpfsError","setIpfsState","PagesSetIpfsState","hideLoadingProgressBar","PagesHideLoadingProgressBarOnLoadFinished","newPagesState","pagesState","PagesNewPageStateSet","newNetworkState","networkState","PagesNetworkStateSet","chainCode","PagesSetChainCode","setChainCodeByNetworkName","triggerNetworkOfflineDialog","PagesNetworkOfflineStateInvoke","setPageSlide","pageSlide","PagesSetPageSlide","pageRoute","toPageId","PageGotoRoute","pageId","disabledButtons","action","navigatorActiveButtonId","navigatorData","IpfsStatesEnum","initialPagesState","pageVisibility","criticalErrorOccured","currentPageId","currentPageSlide","ipfsError","ipfsReady","networkStatus","networkChainCode","isPageLoading","initialUserState","loading","user","adapter","createEntityAdapter","selectId","initialPaymentState","getInitialState","stateChange","upsertOne","ids","entities","addOne","upsertMany","removeOne","removeMany","removeAll","updatedPayments","archived","ensRegistrationAdapter","initialENSRegistrationState","ensBookmarkAdapter","initialENSBookmarkState","getNavigatorButtonsState","createFeatureSelector","createSelector","getNavigatorState","getPagesState","getCurrentNetworkChainId","getUserState","getUser","getPaymentStateFull","pendingPs","ps","paymentStatus","getENSRegistrationStateFull","archivedPs","getENSBookmarkStateFull","GenericDialogComponent","pagesFacadeService","genericDialogRef","ngOnInit","backdropClick","subscribe","closedByButton","closeDialog","overlays","document","getElementsByClassName","wrappers","overlaysCountOnInit","remove","attr","createAttribute","attributes","setNamedItem","existingAttr","getNamedItem","newAttr","close","goToOnExit","goToOnExitPage","goToLink","buttonLink","buttonLinkPageRef","textAlign","selectors","ctx","IconComponent","iconRegistryService","iconsRegistry","iconId","stopCheck","checkIconSubscription","interval","icon","nativeElement","innerText","setIcon","replaceAll","getElementById","APNG","parseURL","apng","width","height","iconAnimation","addContext","getContext","playIcon","play","rewind","frames","ngAfterViewChecked","isVisible","offsetParent","ngOnDestroy","unsubscribe","_reboot","asObservable","BootController","instance","watchReboot","reboot$","restart","production","development","deployed","local","chrome","defaultChain","baseUrl","validChainIds","networks","ropsten","networkId","ensApp","homestead","routes","redirectTo","pathMatch","loadChildren","Promise","m","BootstrapModule","HomeModule","CanvasModule","DomainModule","ProfileModule","CheckoutModule","NotFoundModule","AppRoutingModule","useHash","NetworkStatusEnum","AppComponent","userSessionService","iconsRegistryService","onNetworkOnline","target","onNetworkOffline","cId","ngAfterViewInit","onLine","getHeight","innerHeight","pageLoadingState","NavigatorEffects","actions$","PagesEffects","activatedRoute","createEffect","ofType","ROOT_EFFECTS_INIT","events","runOutsideAngular","NavigationStart","NavigationEnd","NavigationError","canvasProvider","createProvider","withLatestFrom","networkAndPageState","network","pageState","delay","run","message","panelClass","navigateByUrl","addEventListener","hidden","PagesSetVisibility","newProvider","UserEffects","trezorService","ledgerService","userSessionStored","defaultChainId","connectType","timeNow","userSession","connectSignature","originalConnectAddress","deviceLanguage","PaymentEffects","paymentErrorService","currencyExchangeService","walletConnectService","paymentStorageService","paymentEffectsService","PaymentUpsertMany","paymentHash","CheckPaymentFulfilled","ce","PaymentETHUSDRatesSet","paymentMarketAddress","paymentGasLimit","staticGenericTranslatedTexts","txHex","signedPacked","txToFilter","hash","staticPaymentTranslatedTexts","paymentNonce","paymentResolved","pvp","pv","mergeMap","hasResolved","getBlockNumber","blockNumber","searchTxFromBlock","paymentPayer","paymentPayee","getTransactionReceipt","foundTx","getTransactionByNonce","status","confirmations","paymentDate","paymentType","ENSBookmarkEffects","bookMarkService","ENSRegistrationEffects","registrationService","registrationFacilityService","AppModule","HTTP_INTERCEPTORS","multi","BrowserModule","BrowserAnimationsModule","StoreModule","UserState","UserReducers","NavigatorState","NavigatorReducers","PagesState","PagesReducers","PaymentState","PaymentReducers","NavigatorButtonsState","NavigatorButtonsReducers","ENSRegistrationState","ENSRegistrationReducers","ENSBookmarkState","ENSBookmarkReducers","runtimeChecks","strictActionImmutability","EffectsModule","StoreDevtoolsModule","maxAge","mainApp","global","process","browser","versions","node","appIsPaused","BehaviorSubject","enableProdMode","ngRef","destroy","__NgCli_bootstrap_1","bootstrapModule","err","console"],"sources":["./src/app/configurations/contracts/contract-addresses-mainnet.enum.ts","./src/app/configurations/contracts/contract-addresses-testnet.enum.ts","./src/app/configurations/contracts/supported-currencies.enum.ts","./src/app/configurations/contracts/ens-contracts.model.ts","./src/app/configurations/contracts/block-explorers.enum.ts","./src/app/configurations/translations/en.conf.ts","./src/app/configurations/translation.conf.ts","./src/app/configurations/hammer-js.conf.ts","./src/app/configurations/general.conf.ts","./src/app/configurations/icons.ts","./src/app/configurations/image-to-preload.conf.ts","./src/app/configurations/price-oracles.conf.ts","./src/app/models/ens/ens-events.enum.ts","./src/app/models/error-enums/user-store-errors.enum.ts","./src/app/models/service-providers.model.ts","./src/app/models/pay-no-market-address.model.ts","./src/app/models/router-paths.model.ts","./src/app/models/states/pages-interfaces/pages.enum.ts","./src/app/models/states/payment-interfaces/payment-error-codes.enum.ts","./src/app/models/states/payment-interfaces/payment-types.enum.ts","./src/app/models/states/wallet-interfaces/nonce-types.enum.ts","./src/app/models/states/wallet-interfaces/wallet-types.enum.ts","./src/app/modules/miscs/icon.module.ts","./src/app/modules/miscs/custom-address-dialog.module.ts","./src/app/modules/miscs/generic-dialog.module.ts","./src/app/modules/miscs/onboard-dialog.module.ts","./src/app/modules/miscs/spinner-custom.module.ts","./src/app/modules/miscs/bulk-search.module.ts","./src/app/modules/miscs/blocky.module.ts","./src/app/modules/miscs/main-header.module.ts","./src/app/modules/miscs/translation.module.ts","./src/app/modules/pipes/format-time.pipe.ts","./src/app/modules/pipes/time-ago.pipe.ts","./src/app/modules/shared.module.ts","./src/app/services/bookmarks/bookmarks-service.service.ts","./src/app/services/currency/currency.service.ts","./src/app/services/currency/currency-exchange.service.ts","./src/app/services/download/download.service.ts","./src/app/services/ens/ens.service.ts","./src/app/services/form-validation/form-validation.service.ts","./src/app/services/path-resolve/path-resolve.service.ts","./src/app/services/trezor/trezor.service.ts","./src/app/services/icon-registry/icon-registry.service.ts","./src/app/services/store/payments/payment-effects.service.ts","./src/app/services/intercept/intercept.ts","./src/app/services/ledger/ledger.service.ts","./src/app/services/metamask/metamask.service.ts","./src/app/services/misc-utils/misc-utils.service.ts","./src/app/models/error-enums/payment-store-errors.enum.ts","./src/app/services/payment/payment-error.service.ts","./src/app/services/payment/payment-storage.service.ts","./src/app/services/payment/payment.service.ts","./src/app/configurations/contracts/ens-bulk-registration-mainnet.abi.ts","./src/app/configurations/contracts/ens-bulk-registration-testnet.abi.ts","./src/app/services/registration/registration-facility.service.ts","./src/app/configurations/contracts/ens-abi-testnet.model.ts","./src/app/configurations/contracts/ens-abi.model.ts","./src/app/configurations/contracts/ens-registrar-controller-abi-testnet.model.ts","./src/app/configurations/contracts/ens-registrar-controller-abi.model.ts","./src/app/services/registration/registration-data.service.ts","./src/app/services/registration/registration-service.service.ts","./src/app/services/translations/translation.pipe.ts","./src/app/services/translations/translation.service.ts","./src/app/services/user/user.service.ts","./src/app/services/user/user-session.service.ts","./src/app/services/wallet-connect/wallet-connect.service.ts","./src/app/services/wallet/wallet.service.ts","./src/app/store/actions/ens-bookmark.action.ts","./src/app/store/actions/ens-registration.action.ts","./src/app/store/actions/navigation-buttons.actions.ts","./src/app/store/actions/navigator.actions.ts","./src/app/store/actions/pages.actions.ts","./src/app/store/actions/payment.actions.ts","./src/app/store/actions/user.actions.ts","./src/app/store/facades/user.facades.ts","./src/app/store/facades/payment.facade.ts","./src/app/store/facades/ens-bookmark.facades.ts","./src/app/store/facades/ens-registration.facades.ts","./src/app/store/facades/navigator-buttons.facades.ts","./src/app/store/facades/navigator.facades.ts","./src/app/store/facades/pages.facades.ts","./src/app/store/reducers/navigator-buttons.reducers.ts","./src/app/store/reducers/navigator.reducers.ts","./src/app/models/ipfs/ipfs-states.enum.ts","./src/app/store/reducers/pages.reducers.ts","./src/app/store/reducers/user.reducers.ts","./src/app/store/reducers/payment.reducers.ts","./src/app/store/reducers/ens-registration.reducers.ts","./src/app/store/reducers/ens-bookmark.reducers.ts","./src/app/store/selectors/navigator-buttons.selectors.ts","./src/app/store/selectors/navigator.selectors.ts","./src/app/store/selectors/pages.selectors.ts","./src/app/store/selectors/user.selectors.ts","./src/app/store/selectors/payment.selectors.ts","./src/app/store/selectors/ens-registration.selectors.ts","./src/app/store/selectors/ens-bookmark.selectors.ts","./src/app/widgets/generic-dialog/generic-dialog.component.html","./src/app/widgets/generic-dialog/generic-dialog.component.ts","./src/app/widgets/icon/icon.component.ts","./src/app/widgets/icon/icon.component.html","./src/boot-control.ts","./src/environments/environment.test.ts","./src/app/app-routing.module.ts","./src/app/models/states/pages-interfaces/network-status.enum.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/store/effects/navigator.effects.ts","./src/app/store/effects/pages.effects.ts","./src/app/store/effects/user.effects.ts","./src/app/store/effects/payment.effects.ts","./src/app/store/effects/ens-bookmark.effects.ts","./src/app/store/effects/ens-registration.effects.ts","./src/app/app.module.ts","./src/main.ts"],"sourcesContent":["import { AcceptedCurrencyModel } from '../../models/currencies';\n\nexport enum ContractAddressesMainnetEnum {\n  ETH = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n  DAI = '0xf80A32A835F79D7787E8a8ee5721D0fEaFd78108',\n  USDT = '0xB404c51BBC10dcBE948077F18a4B8E553D160084',\n  WBTC = '0xa0E54Ab6AA5f0bf1D62EC3526436F3c05b3348A0',\n}\n\nexport const bulkRegistrationMainnet =\n  '0xb1C42396eAB6908A924be00D3A794CEB673c57E9';\n\nexport const acceptedCurrenciesMainnet = [] as AcceptedCurrencyModel[];\n","import { AcceptedCurrencyModel } from '../../models/currencies';\n\nexport enum ContractAddressesTestnetEnum {\n  ETH = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n  DAI = '0xFf795577d9AC8bD7D90Ee22b6C1703490b6512FD',\n  USDT = '0x13512979ADE267AB5100878E2e0f485B568328a4',\n  WBTC = '0x3b92f58feD223E2cB1bCe4c286BD97e42f2A12EA',\n}\n\nexport const bulkRegistrationTestnet =\n  '0x48e2263cD977710d6A6dF61DDf8c337e2631E179';\n\nexport const acceptedCurrenciesTestnet = [\n  {\n    currency: 'ETH',\n    address: ContractAddressesTestnetEnum.ETH,\n    decimals: 18,\n    decimalRepresentation: '1000000000000000000',\n    highValueAsset: true,\n  },\n  {\n    currency: 'DAI',\n    address: ContractAddressesTestnetEnum.DAI,\n    decimals: 18,\n    decimalRepresentation: '1000000000000000000',\n    highValueAsset: false,\n  } as AcceptedCurrencyModel,\n  {\n    currency: 'USDT',\n    address: ContractAddressesTestnetEnum.USDT,\n    decimals: 6,\n    decimalRepresentation: '1000000',\n    highValueAsset: false,\n  } as AcceptedCurrencyModel,\n  {\n    currency: 'WBTC',\n    address: ContractAddressesTestnetEnum.WBTC,\n    decimals: 18,\n    decimalRepresentation: '1000000000000000000',\n    highValueAsset: true,\n  } as AcceptedCurrencyModel,\n] as AcceptedCurrencyModel[];\n","export enum SupportedCurrenciesEnum {\n  ETH = \"Ethereum\",\n  DAI = \"Dai Stablecoin\",\n  USDT = \"Tether USD\",\n  WBTC = \"Wrapped Bitcoin\",\n}\n","import { payNoMarketAddress } from 'src/app/models/pay-no-market-address.model';\n\nexport const ENSContracts = {\n  registrar: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  resolver: '0x42D63ae25990889E35F215bC95884039Ba354115',\n  registrarController: '0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5',\n  migrationContract: '0x6109DD117AA5486605FC85e040ab00163a75c662',\n  nullResolver: payNoMarketAddress,\n};\n","export enum BlockExplorersEnum {\n  homestead = 'https://etherscan.io/',\n  ropsten = 'https://ropsten.etherscan.io/',\n}\n","export default {\n  BUTTON: {\n    PROCEED: 'Proceed',\n    DISMISS: 'Dismiss',\n    CONNECT: 'Connect',\n    CONNECT_WALLET: 'Connect Wallet',\n    DISCONNECT: 'Disconnect',\n    LOGOUT: 'Logout',\n    CLOSE: 'Close',\n    LAUNCH_APP: 'Launch App',\n    CONNECT_TO_PROCEED: 'Connect Wallet',\n    VIEW_DETAILS: 'View Details',\n    REFRESH: 'Refresh',\n    START_REGISTRATION: 'Start Registration',\n    CANCEL: 'Cancel',\n    PRESS_ENTER: 'Press Enter',\n    LEARN_MORE: 'Learn More',\n    CLOSE_WINDOW: 'Close Window',\n    SHOW_AVAILABLE_ONLY: 'Show Available Only',\n    SHOW_AVAILABLE: 'Show Available',\n    PROCEED_SEARCH: 'Proceed Search',\n    DOWNLOAD: 'Download',\n    SHOW_ALL: 'Show All',\n    DESELECT_ALL: 'Deselect All',\n    SHOW_SELCTED: 'Show Selected',\n    LINK: 'Link',\n    CUSTOM_LINK: 'Custom Link',\n    SET_QR_LINK_ALL: 'Set QR Link All',\n    SET_QR_LINK: 'Set QR Link',\n    DISABLE_ALL: 'Disable All',\n    DISABLE_QR_CODE: 'Disable QR Code',\n    ENABLE_QR_CODE: 'Enable QR Code',\n    SET_QR_COLOR: 'Set QR Color',\n    SET_COLOR: 'Set Color',\n    SET_ALL_COLORS: 'Set All Colors',\n    SET_PRICE: 'Set Price',\n    SET_PRICE_ALL: 'Set Price All',\n    RESET: 'Reset',\n    CHECK_PROFILE: 'Check Profile',\n    GO_TO_DASHBOARD: 'Go to Dashboard',\n    GO_TO_HOME: 'Go To Home',\n    VIEW_PROFILE: 'View Profile',\n    CHECK_DOMAINS: 'Check Domains',\n    TRANSACTION_DETAILS: 'Transaction Details',\n    BUY_NOW: 'Buy Now',\n  },\n  HEADER: {\n    FAQ: 'FAQs',\n    BACK_TO_HOME: 'Back to Home',\n    HELP_SUPPORT: 'Help & Support',\n    CANCEL_REGISTRATION: 'Cancel Registration',\n    PROFILE: 'Profile',\n    SETTINGS: 'Settings',\n    DOCS: 'Docs',\n    DOCUMENTATIONS: 'Documentations',\n    CART: 'Cart',\n    BOOKMARKS: 'Bookmarks',\n  },\n  IPFS: {\n    INITIALISING: 'Starting p2p',\n    FINDING_PEERS: 'Finding peers',\n    FAILED: 'Failed',\n    READY: 'Ready',\n    PUBLISHING: 'Publishing',\n  },\n  EVENTS: {\n    TRANSFER: 'Transfer',\n    REGISTRATION: 'Registration',\n    RENEWAL: 'Renewal',\n    SALE: 'Sale',\n    MINT: 'Mint',\n    BURN: 'Burn',\n  },\n  GENERIC: {\n    NETWORK_CHANGED_INCOMPATIBLE:\n      'Network is not supported. Please change your network.',\n    IPNS_PUBLISHING_COMPLETED: 'Publishing completed!',\n    PENDING_TRANSACTION_CERATED:\n      'A new transaction has been created. Please check your wallet.',\n  },\n  LABELS: {\n    PROFILE: 'Profile',\n    SEARCH: 'Search',\n    CONTAIN_ALPHABET: 'Contain Alphabet',\n    CONTAIN_NUMBERS: 'Contain Numbers',\n    CONTAIN_EMOJI: 'Contain Emoji',\n    MIN_LENGTH: 'Min. Length',\n    MAX_LENGTH: 'Max. Length',\n    CONTAINING_KEYWORDS: 'Containing Keywords',\n    FILTERS: 'Filters',\n    DOMAINS: 'Domains',\n    DOMAIN_HISTORY: 'Domain History',\n    EXPIRATION_DATE: 'Expiration Date',\n    REGISTRATION_DATE: 'Registration Date',\n    CREATION_DATE: 'Creation Date',\n    DETAILS: 'Details',\n    YOUR_DOMAINS: 'Your Domains',\n    PROCESSING: 'Processing',\n    LAYOUT: 'Layout',\n    ENTER_SUFFIX: 'Enter suffix',\n    ENTER_PREFIX: 'Enter prefix',\n    CLICK: 'Click',\n    CONNECT_TO_START: ' to get started or ',\n    TIP: 'Tip',\n    ADVANCED_SEARCH_TIP:\n      'use new line or commas to seperate your domain entries.',\n    ADVANCED_SEARCH: 'Avanced Search',\n    ADVANCED_MODE: 'Advanced Mode',\n    REGISTER_DOMAINS_TO: 'Register Domains To',\n    NO_DOMAINS_SELECTED: 'No domains selected.',\n    FIND_AND_REGISTER: 'Find domains e.g. domain1, domain2...',\n    SELECTED_DOMAINS: 'Selected Domains',\n    REGISTER: 'Register',\n    BOOKMARKS: 'Bookmarks',\n    SEARCH_RESULTS: 'Search Results',\n    PROCEED_TO_REGISTRATION: 'Proceed To Registration',\n    REGISTER_DOMAINS: 'Register Domains',\n    REGISTRANT_ADDRESS: 'Registrant Address',\n    SET_RESOLVER: 'Set Resolver',\n    TOTAL_COST: 'Total Cost',\n    GAS_PRICE: 'Gas Price',\n    NO_ADDRESS_DETECTED: 'No address detected.',\n    DURATION: 'Duration',\n  },\n  REGISTRATION: {\n    BEFORE_COMMIT: 'Step 1: request registration.',\n    COMMIT_SENT: 'Processing request...',\n    COMMIT_COMPLETE: 'Step 1: request registration received...',\n    AWAIT: 'Finalising request...',\n    BEFORE_REGISTRATION: 'Step 3: complete registration.',\n    REGISTRATION_SENT: 'Completing registration...',\n    REGISTRATION_COMPLETE: 'Registration complete!',\n    REGISTRATION_COMPLETE_TITLE: 'Registration Complete',\n    YOUR_DOMAINS_HAVE_NOW_BEEN_REGISTERED:\n      'Your domains have now been registered.',\n    BASKET_EMPTY: 'Your basket is empty',\n    PLEASE_SELECT_DOMAINS_TO_REGISTER: 'Please select new domains to register.',\n  },\n  PAYMENT: {\n    PAYMENT_CANCELLED: 'Transaction cancelled. Please try again.',\n  },\n  SPINNER: {\n    NO_DATA_TO_DISPLAY: 'No items to display.',\n    PERFORMING_SEARCH: 'Performing search...',\n    LOADING_DATA: 'Loading Data...',\n    FOLLOW_THE_INSTRUCTIONS_ON_YOUR_WALLET:\n      'Please follow the instructions in your wallet to proceed.',\n  },\n  FORM_LABELS: {\n    ENTER_DURATION: 'Enter Duration',\n    ENTER_QR_LINK: 'Enter custom QR Code URL',\n    ENTER_PRICE: 'Enter price',\n    ENTER_CUSTOM_ADDRESS: 'Enter custom address',\n  },\n  FORM_ERRORS: {\n    INVALID_DURATION: 'Invalid Duration',\n    INVALID_QR_LINK: 'Invalid URL, please try again.',\n    INVALID_PRICE: 'Invalid price, please try again.',\n    NO_ADDRESS_DETECTED: 'No address detected, please try again.',\n  },\n};\n","import * as EN from \"./translations/en.conf\";\n\nexport const validTranslations = {\n  en: EN,\n};\n","import { HammerGestureConfig } from '@angular/platform-browser';\nimport { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class HammerJsConf extends HammerGestureConfig {\n\toverrides = {\n\t\tswipe: { velocity: 0.3, threshold: 10 },\n\t} as any;\n}\n","import { PagesEnum } from '../models/states/pages-interfaces';\n\nexport const generalConfigurations = {\n  version: '0.1.0',\n  defaultLanguage: 'en',\n  defaultPage: PagesEnum.HOME,\n  maximumDecimalInPrices: 8,\n  maxAttemptsToCheckoutData: 3,\n  sessionTimeout: 6000 * 15,\n  maxRPCCallRetries: 3,\n  timeUntilImageLoadErrors: 3000,\n  timeToUpdateCheckoutPipe: 3000,\n  timeToUpdateRegistrationGasPrice: 5000,\n  timeUntilCheckoutExpires: 3000,\n  maxConfirmationsUntilTxFinal: 1,\n  declarePaymentStatusUnkownUntilXFailedDataFetches: 5,\n  maxCheckoutRetryUntilRehydrateProcessId: 5,\n  maxIpfsSubscriptionRetries: 5,\n  maxDomainsToRegister: 50,\n  defaultCurrency: 'ETH',\n  docsLink: 'https://predomain.gitbook.io/predomain-docs/',\n  blockscanLink: 'https://chat.blockscan.com/index?a=',\n  trezorManifest: {\n    email: 'predomain@skiff.com',\n    appUrl: 'https://predomain.eth.limo',\n  },\n  appMeta: {\n    description: 'Decentralised ENS Search, Registration, & Marketplace',\n    url: 'https://predomain.eth.limo',\n    icons: ['https://ecanvas.eth.limo/assets/logo.png'],\n    name: 'Predomain.eth',\n  },\n  wallectConnectSupportedWallets: [\n    'rainbow',\n    'metamask',\n    'argent',\n    'trust',\n    'trezor',\n    'imtoken',\n    'pillar',\n    'coinbase',\n  ],\n};\n","export const icons = {\n  check: 'assets/icons/check.apng',\n  confetti: 'assets/icons/confetti.apng',\n  cart_empty: 'assets/icons/cart_empty.apng',\n  llayers: 'assets/icons/llayers.apng',\n  spin: 'assets/icons/spin.apng',\n};\n\nexport const infiniteLoopedIcons = ['spin', 'confetti'];\n","export const imageToPreload = [\n  'icn-ledger.svg',\n  'icn-metamask.svg',\n  'trezor-logo.png',\n  'metamask-connect-in-progress.png',\n  'metamask-sign-in-progress.png',\n  'trezor-connect-in-progress.png',\n  'trezor-sign-in-progress.png',\n  'ledger-connect-in-progress.png',\n  'ledger-sign-in-progress.png',\n];\n","export const priceOracles = {\n  CRYPTO_COMPARE:\n    \"https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD\",\n  BINANCE: \"https://www.binance.com/api/v3/ticker/price\",\n  POLONIEX: \"https://poloniex.com/public?command=returnTicker\",\n  HUOBI: \"https://api.huobi.pro/market/tickers\",\n};\n","export enum EnsEventsEnum {\n  TRANSFER = 'EVENTS.TRANSFER',\n  REGISTRATION = 'EVENTS.REGISTRATION',\n  RENEWAL = 'EVENTS.RENEWAL',\n  SALE = 'EVENTS.SALE',\n  MINT = 'EVENTS.MINT',\n  BURN = 'EVENTS.BURN',\n}\n\nexport enum EnsEvensSymbolEnum {\n  'EVENTS.TRANSFER' = 'sync_alt',\n  'EVENTS.REGISTRATION' = 'sync_alt',\n  'EVENTS.RENEWAL' = 'update',\n  'EVENTS.SALE' = 'shopping_cart',\n  'EVENTS.MINT' = 'magic_button',\n  'EVENTS.BURN' = 'local_fire_department',\n}\n","export enum UserStoreErrorsEnum {\n  UNKNOWN = \"UNKNOWN_USER\",\n  CONNECT_ERROR = \"CONNECT_ERROR\",\n  EMAIL_INVALID = \"EMAIL_INVALID\",\n  COMPANY_NAME_INVALID = \"COMPANY_NAME_INVALID\",\n  COMPANY_ADDRESS_INVALID = \"COMPANY_ADDRESS_INVALID\",\n  SELECTED_CURRENCIES_INVALID = \"SELECTED_CURRENCIES_INVALID\",\n  WALLET_ADDRESS_INVALID = \"WALLET_ADDRESS_INVALID\",\n  ACCOUNT_EXISTS = \"ACCOUNT_EXISTS\",\n  USER_NO_NETWORK_CONNECTION = \"USER_NO_NETWORK_CONNECTION\",\n  CANNOT_FIND_WALLET_ADDRESS_TO_RECOVER = \"CANNOT_FIND_WALLET_ADDRESS_TO_RECOVER\",\n  DEVICE_VERIFICATION_FAILED = \"DEVICE_VERIFICATION_FAILED\",\n  REGISTRATION_EXPIRED = \"REGISTRATION_EXPIRED\",\n  REGISTER_CAPTCHA_INVALID = \"REGISTER_CAPTCHA_INVALID\",\n  EMAIL_VERIFICATION_FAILED = \"EMAIL_VERIFICATION_FAILED\",\n}\n","import { HttpClient } from '@angular/common/http';\nimport { FormatTimePipe, TimeAgoPipe } from '../modules/pipes';\nimport {\n  FormValidationService,\n  MiscUtilsService,\n  PaymentStorageService,\n  TranslationService,\n  UserService,\n  UserSessionService,\n} from '../services';\nimport { BookmarksServiceService } from '../services/bookmarks';\nimport { EnsService } from '../services/ens';\nimport { WalletConnectService } from '../services/wallet-connect';\nimport {\n  RegistrationDataService,\n  RegistrationServiceService,\n} from '../services/registration';\nimport {\n  NavigatorButtonsFacadeService,\n  NavigatorFacadeService,\n  PagesFacadeService,\n  UserFacadeService,\n} from '../store/facades';\nimport { DownloadService } from '../services/download/download.service';\n\nexport const serviceProviders = [\n  UserService,\n  UserSessionService,\n  UserFacadeService,\n  PagesFacadeService,\n  NavigatorFacadeService,\n  NavigatorButtonsFacadeService,\n  FormValidationService,\n  MiscUtilsService,\n  TranslationService,\n  FormatTimePipe,\n  TimeAgoPipe,\n  HttpClient,\n  EnsService,\n  RegistrationDataService,\n  BookmarksServiceService,\n  RegistrationServiceService,\n  PaymentStorageService,\n  WalletConnectService,\n  DownloadService,\n];\n","export const payNoMarketAddress = '0x0000000000000000000000000000000000000000';\n","export const routerPaths = {\n  canvas: 'canvas',\n  bootstrap: 'bootstrap',\n  home: 'home',\n  checkout: 'checkout',\n  notfound: 'notfound',\n  profile: 'profile',\n  domain: 'domain',\n};\n","export enum PagesEnum {\n  BOOTSTRAP = 'BOOTSTRAP',\n  HOME = 'HOME',\n  CANVAS = 'CANVAS',\n  CHECKOUT = 'CHECKOUT',\n  ERROR = 'ERROR',\n  SUCCESS = 'SUCCESS',\n  PROFILE = 'PROFILE',\n  DOMAIN = 'DOMAIN',\n  NOTFOUND = 'NOTFOUND',\n}\n","export enum PaymentErrorCodes {\n  NONE,\n  PAYMENT_EXPIRED,\n  TOKEN_NOT_SUPPORTED,\n  INSUFFICIENT_FUNDS,\n  SIGNATURE_INVALID,\n  PAYMENT_FAILURE,\n  AMOUNT_ZERO,\n  MARKET_NOT_SUPPORTED,\n}\n","/**\n * LEAVE THE VALUES, IT MUST BE SET EXPLICITLY.\n */\nexport enum PaymentTypesEnum {\n  PAY = 0,\n  REGISTER = 1,\n  COMMIT = 2,\n}\n","export enum NonceTypesEnum {\n  SERIAL,\n  TOKEN\n}\n","export enum WalletTypesEnum {\n  METAMASK,\n  LEDGER,\n  TREZOR,\n  WALLET_CONNECT,\n}\n","import { NgModule } from '@angular/core';\nimport { TranslationModule } from './translation.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { serviceProviders } from '../../models';\nimport { IconComponent } from 'src/app/widgets/icon';\n\n@NgModule({\n  imports: [\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [IconComponent],\n  exports: [\n    IconComponent,\n    MatDialogModule,\n    MatButtonModule,\n    TranslationModule,\n    FlexLayoutModule,\n  ],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [],\n})\nexport class IconModule {}\n","import { NgModule } from \"@angular/core\";\nimport { TranslationModule } from \"./translation.module\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\nimport { serviceProviders } from \"../../models\";\nimport { CustomAddressComponent } from \"../../widgets/custom-address/custom-address.component\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { CommonModule } from \"@angular/common\";\n\n@NgModule({\n  imports: [\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    ReactiveFormsModule,\n    CommonModule,\n    FormsModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [CustomAddressComponent],\n  exports: [\n    CustomAddressComponent,\n    TranslationModule,\n    FlexLayoutModule,\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n  bootstrap: [],\n  entryComponents: [CustomAddressComponent],\n  schemas: [],\n})\nexport class CustomAddressDialogModule {}\n","import { NgModule } from '@angular/core';\nimport { TranslationModule } from './translation.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { serviceProviders } from '../../models';\nimport { GenericDialogComponent } from '../../widgets/generic-dialog/generic-dialog.component';\nimport { IconModule } from './icon.module';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    IconModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [GenericDialogComponent],\n  exports: [\n    CommonModule,\n    GenericDialogComponent,\n    TranslationModule,\n    FlexLayoutModule,\n    IconModule,\n  ],\n  bootstrap: [],\n  entryComponents: [GenericDialogComponent],\n  schemas: [],\n})\nexport class GenericDialogModule {}\n","import { NgModule } from \"@angular/core\";\nimport { TranslationModule } from \"./translation.module\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\nimport { serviceProviders } from \"../../models\";\nimport { OnboardDialogComponent } from \"../../widgets/onboard-dialog\";\nimport { SharedModule } from \"../shared.module\";\n\n@NgModule({\n  imports: [\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    SharedModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [OnboardDialogComponent],\n  exports: [OnboardDialogComponent, TranslationModule, FlexLayoutModule],\n  bootstrap: [],\n  entryComponents: [OnboardDialogComponent],\n  schemas: [],\n})\nexport class OnboardDialogModule {}\n","import { NgModule } from '@angular/core';\nimport { TranslationModule } from './translation.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { serviceProviders } from '../../models';\nimport { SpinnerCustomComponent } from 'src/app/widgets/spinner-custom';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from './icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    IconModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [SpinnerCustomComponent],\n  exports: [\n    SpinnerCustomComponent,\n    CommonModule,\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    IconModule,\n  ],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [],\n})\nexport class SpinnerCustomModule {}\n","import { NgModule } from '@angular/core';\nimport { TranslationModule } from './translation.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { serviceProviders } from '../../models';\nimport { IconModule } from './icon.module';\nimport { CommonModule } from '@angular/common';\nimport { BulkSearchComponent } from 'src/app/widgets/bulk-search';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { SpinnerCustomModule } from './spinner-custom.module';\nimport { MatInputModule } from '@angular/material/input';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatInputModule,\n    MatSlideToggleModule,\n    MatProgressBarModule,\n    SpinnerCustomModule,\n    IconModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [BulkSearchComponent],\n  exports: [\n    BulkSearchComponent,\n    CommonModule,\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatInputModule,\n    MatSlideToggleModule,\n    MatProgressBarModule,\n    SpinnerCustomModule,\n    IconModule,\n  ],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [],\n})\nexport class BulkSearchModule {}\n","import { NgModule } from '@angular/core';\nimport { TranslationModule } from './translation.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { serviceProviders } from '../../models';\nimport { IconModule } from './icon.module';\nimport { CommonModule } from '@angular/common';\nimport { BlockyComponent } from 'src/app/widgets/blocky';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslationModule,\n    MatIconModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    IconModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [BlockyComponent],\n  exports: [\n    CommonModule,\n    BlockyComponent,\n    MatIconModule,\n    TranslationModule,\n    FlexLayoutModule,\n    IconModule,\n  ],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [],\n})\nexport class BlockyModule {}\n","import { NgModule } from '@angular/core';\nimport { TranslationModule } from './translation.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { serviceProviders } from '../../models';\nimport { IconModule } from './icon.module';\nimport { CommonModule } from '@angular/common';\nimport { MainHeaderComponent } from 'src/app/widgets/main-header';\nimport { BulkSearchModule } from './bulk-search.module';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { BlockyModule } from './blocky.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SpinnerCustomModule } from './spinner-custom.module';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatBadgeModule,\n    MatMenuModule,\n    MatAutocompleteModule,\n    MatInputModule,\n    FlexLayoutModule,\n    SpinnerCustomModule,\n    BulkSearchModule,\n    BlockyModule,\n    IconModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [MainHeaderComponent],\n  exports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MainHeaderComponent,\n    MatDialogModule,\n    MatButtonModule,\n    MatBadgeModule,\n    MatAutocompleteModule,\n    MatMenuModule,\n    MatInputModule,\n    TranslationModule,\n    FlexLayoutModule,\n    SpinnerCustomModule,\n    BulkSearchModule,\n    BlockyModule,\n    IconModule,\n  ],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [],\n})\nexport class MainHeaderModule {}\n","import { NgModule } from \"@angular/core\";\nimport { TranslationPipe } from \"../../services\";\n\n@NgModule({\n  imports: [],\n  providers: [],\n  declarations: [TranslationPipe],\n  exports: [TranslationPipe],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [],\n})\nexport class TranslationModule {}\n","import { DatePipe } from \"@angular/common\";\nimport { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n  name: \"formatTime\",\n})\nexport class FormatTimePipe extends DatePipe implements PipeTransform {\n  transform(value: string): any {\n    if (value) {\n      const inputDate = new Date(value);\n\n      return super.transform(inputDate, \"MMM d y HH:MM\");\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport TimeAgo from 'javascript-time-ago';\nimport en from 'javascript-time-ago/locale/en';\nTimeAgo.addDefaultLocale(en);\n\n@Pipe({\n  name: 'timeAgo',\n})\nexport class TimeAgoPipe implements PipeTransform {\n  transform(value: string): any {\n    const timeAgo = new TimeAgo('en-US');\n    if (value) {\n      const time = timeAgo.format(new Date(parseInt(value)));\n      return time;\n    }\n  }\n}\n","import {\n  NgModule,\n  CUSTOM_ELEMENTS_SCHEMA,\n  NO_ERRORS_SCHEMA,\n} from '@angular/core';\nimport {\n  MAT_BOTTOM_SHEET_DATA,\n  MatBottomSheetModule,\n} from '@angular/material/bottom-sheet';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogRef,\n  MatDialogModule,\n} from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport {\n  MatProgressBarModule,\n  MAT_PROGRESS_BAR_DEFAULT_OPTIONS,\n} from '@angular/material/progress-bar';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { TranslationModule } from './miscs/translation.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport {\n  GenericDialogModule,\n  CustomAddressDialogModule,\n  IconModule,\n} from './miscs';\nimport { serviceProviders } from '../models';\nimport { HammerJsConf } from '../configurations';\nimport { GetScrollableXyDirective } from './directives';\nimport { FormatTimePipe, TimeAgoPipe } from './pipes';\nimport { HeaderComponent } from '../widgets/header';\nimport { NavigatorComponent } from '../widgets/navigator';\nimport { NavigatorButtonComponent } from '../widgets/navigator-button';\nimport { PinInputComponent } from '../widgets/pin-input';\nimport { SpinnerComponent } from '../widgets/spinner';\nimport { PreviewImageComponent } from '../widgets/preview-image';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { QRCodeModule } from 'angularx-qrcode';\nimport { NgxColorsModule } from 'ngx-colors';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n    CommonModule,\n    RouterModule,\n    FlexLayoutModule,\n    ReactiveFormsModule,\n    FormsModule,\n    IconModule,\n    MatBottomSheetModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    MatExpansionModule,\n    MatButtonModule,\n    MatChipsModule,\n    MatInputModule,\n    MatSelectModule,\n    MatTabsModule,\n    MatCardModule,\n    MatDividerModule,\n    MatIconModule,\n    MatRadioModule,\n    MatStepperModule,\n    MatCheckboxModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatRippleModule,\n    MatProgressSpinnerModule,\n    MatTableModule,\n    MatListModule,\n    MatMenuModule,\n    MatTooltipModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSnackBarModule,\n    MatProgressBarModule,\n    MatBadgeModule,\n    TranslationModule,\n    DragDropModule,\n    OverlayModule,\n    GenericDialogModule,\n    CustomAddressDialogModule,\n    QRCodeModule,\n    NgxColorsModule,\n  ],\n  providers: [\n    ...serviceProviders,\n    {\n      provide: HAMMER_GESTURE_CONFIG,\n      useClass: HammerJsConf,\n    },\n    { provide: MAT_PROGRESS_BAR_DEFAULT_OPTIONS, useValue: {} },\n    { provide: MAT_BOTTOM_SHEET_DATA, useValue: {} },\n    { provide: MAT_DIALOG_DATA, useValue: {} },\n    { provide: MatDialogRef, useValue: {} },\n  ],\n  declarations: [\n    HeaderComponent,\n    NavigatorComponent,\n    NavigatorButtonComponent,\n    PinInputComponent,\n    SpinnerComponent,\n    GetScrollableXyDirective,\n    FormatTimePipe,\n    TimeAgoPipe,\n    PreviewImageComponent,\n  ],\n  exports: [\n    HttpClientModule,\n    TranslationModule,\n    CommonModule,\n    RouterModule,\n    HeaderComponent,\n    NavigatorComponent,\n    NavigatorButtonComponent,\n    MatAutocompleteModule,\n    PinInputComponent,\n    SpinnerComponent,\n    PreviewImageComponent,\n    FlexLayoutModule,\n    ReactiveFormsModule,\n    FormsModule,\n    IconModule,\n    MatBottomSheetModule,\n    MatExpansionModule,\n    MatDialogModule,\n    MatChipsModule,\n    MatButtonModule,\n    MatInputModule,\n    MatSelectModule,\n    MatTabsModule,\n    MatCardModule,\n    MatDividerModule,\n    MatIconModule,\n    MatRadioModule,\n    MatCheckboxModule,\n    MatSliderModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSlideToggleModule,\n    MatRippleModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatListModule,\n    MatStepperModule,\n    MatTooltipModule,\n    MatMenuModule,\n    MatTableModule,\n    MatSnackBarModule,\n    MatBadgeModule,\n    DragDropModule,\n    OverlayModule,\n    GetScrollableXyDirective,\n    FormatTimePipe,\n    TimeAgoPipe,\n    GenericDialogModule,\n    CustomAddressDialogModule,\n    QRCodeModule,\n    NgxColorsModule,\n  ],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [NO_ERRORS_SCHEMA, CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class SharedModule {}\n","import { Injectable } from '@angular/core';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BookmarksServiceService {\n  constructor() {}\n\n  countBookmarks() {\n    return this.loadBookmarksAndFeed().length;\n  }\n\n  loadBookmarks() {\n    return localStorage.getItem('canvas-bookmarks');\n  }\n\n  loadBookmarksAndFeed() {\n    const sBookmarks = this.loadBookmarks();\n    if (sBookmarks !== null && sBookmarks !== '' && sBookmarks !== '[]') {\n      return JSON.parse(sBookmarks);\n    }\n    return [];\n  }\n\n  saveBookmark(domainData: ENSDomainMetadataModel) {\n    const bookmarksRaw = this.loadBookmarksAndFeed().reduce(\n      (accumulator, value) => {\n        return { ...accumulator, [value.labelName]: value };\n      },\n      {}\n    );\n    const bKeys = Object.keys(bookmarksRaw);\n    const bookmarks = [...new Set(bKeys)].map((k) => bookmarksRaw[k]);\n    bookmarks.push(domainData);\n    localStorage.setItem('canvas-bookmarks', JSON.stringify(bookmarks));\n    return bookmarks;\n  }\n\n  removeBookmark(bookmarks: ENSDomainMetadataModel[], domainName: string) {\n    const bookmarksUpdated = [];\n    bookmarks.filter((d) => {\n      if (d.labelName !== domainName) {\n        bookmarksUpdated.push(d);\n      }\n    });\n    localStorage.setItem('canvas-bookmarks', JSON.stringify(bookmarks));\n    return bookmarks;\n  }\n\n  clearBookmarks() {\n    localStorage.setItem('canvas-bookmarks', JSON.stringify([]));\n  }\n\n  isDomainBookmarked(bookmarks: ENSDomainMetadataModel[], domainName: string) {\n    for (const d of bookmarks) {\n      if (d.labelName === domainName) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import * as ethers from 'ethers';\nimport { BigNumber } from 'ethers';\nimport { environment } from '../../../environments/environment';\nimport { Injectable } from '@angular/core';\nimport {\n  acceptedCurrenciesMainnet,\n  acceptedCurrenciesTestnet,\n  ContractAddressesMainnetEnum,\n  ContractAddressesTestnetEnum,\n  SupportedCurrenciesEnum,\n} from '../../configurations/contracts';\nimport { AcceptedCurrencyModel } from '../../models/currencies';\nimport { PaymentTypesEnum } from '../../models/states/payment-interfaces';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrencyService {\n  constructor() {}\n  /**\n   * Environment production: mainnet contracts are used.\n   * Environment development (true): devnet contracts are used.\n   * Environment development (false): testnet (ropsten) contracts are used.\n   * @param currency\n   */\n  deriveCurrencyAddressFromName(currency: string) {\n    let currencies;\n    if (environment.production === true) {\n      currencies = Object(ContractAddressesMainnetEnum);\n    } else {\n      currencies = Object(ContractAddressesTestnetEnum);\n    }\n    return currencies[currency.toUpperCase()];\n  }\n\n  deriveCurrencyDataFromCurrencyName(currency: string) {\n    let currencies;\n    if (environment.production === true) {\n      currencies = Object(acceptedCurrenciesMainnet) as AcceptedCurrencyModel[];\n    } else {\n      currencies = Object(acceptedCurrenciesTestnet) as AcceptedCurrencyModel[];\n    }\n    let currencySearched: any = false;\n    for (const c of currencies) {\n      if (c.currency === currency) {\n        currencySearched = c as AcceptedCurrencyModel;\n      }\n    }\n    return currencySearched;\n  }\n\n  convertAmountToDecimal(amountInString: string, currency: string) {\n    const paymentCurrency = this.deriveCurrencyDataFromCurrencyName(currency);\n    if (paymentCurrency === false) {\n      return false;\n    }\n    const currencyData = paymentCurrency as AcceptedCurrencyModel;\n    const bnAmount = BigNumber.from(amountInString);\n    return ethers.utils.formatUnits(bnAmount, currencyData.decimals);\n  }\n\n  convertAmountToToken(amountInString: string, currency: string) {\n    const paymentCurrency = this.deriveCurrencyDataFromCurrencyName(currency);\n    if (paymentCurrency === false) {\n      return false;\n    }\n    const currencyData = paymentCurrency as AcceptedCurrencyModel;\n    return ethers.utils.parseUnits(amountInString, currencyData.decimals);\n  }\n\n  getSupportedCurrencies() {\n    let currencies;\n    if (environment.production === true) {\n      currencies = Object(acceptedCurrenciesMainnet) as AcceptedCurrencyModel[];\n    } else {\n      currencies = Object(acceptedCurrenciesTestnet) as AcceptedCurrencyModel[];\n    }\n    return currencies as AcceptedCurrencyModel[];\n  }\n\n  determineDefaultCurrencyForPayment(\n    searchType: PaymentTypesEnum,\n    chooseSecondDefault = false\n  ) {\n    let secondDefaultToBeChosen = false;\n    for (const c of Object.keys(SupportedCurrenciesEnum)) {\n      const currencyData = this.deriveCurrencyDataFromCurrencyName(\n        c\n      ) as AcceptedCurrencyModel;\n      if (searchType === PaymentTypesEnum.PAY) {\n        if (chooseSecondDefault === true && secondDefaultToBeChosen === false) {\n          secondDefaultToBeChosen = true;\n        } else {\n          return c;\n        }\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { from, Observable, of, Subject, timer } from 'rxjs';\nimport {\n  catchError,\n  delayWhen,\n  map,\n  retryWhen,\n  switchMap,\n  takeUntil,\n} from 'rxjs/operators';\nimport { generalConfigurations, priceOracles } from 'src/app/configurations';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrencyExchangeService {\n  ethUsdPriceOraclesList = priceOracles;\n\n  binanceQueryResultParse(payload) {\n    const newPrices = {};\n    if (payload === false) {\n      return newPrices;\n    }\n    for (const t of payload) {\n      newPrices[t.symbol] = {\n        ticker: t.symbol.toUpperCase(),\n        price: parseFloat(t.price).toFixed(8),\n      };\n    }\n    return newPrices;\n  }\n\n  poloniexQueryResultParse(payload) {\n    const newPrices = {};\n    if (payload === false) {\n      return newPrices;\n    }\n    const pricesContained = payload;\n    const priceTickerKeys = Object.keys(pricesContained);\n    for (const k of priceTickerKeys) {\n      const t = pricesContained[k];\n      const normalizedTicker = k.replace('_', '').toUpperCase();\n      newPrices[normalizedTicker] = {\n        ticker: normalizedTicker,\n        price: parseFloat(t.last).toFixed(8),\n      };\n    }\n    return newPrices;\n  }\n\n  huobiQueryResultParse(payload) {\n    const newPrices = {};\n    if (payload === false) {\n      return newPrices;\n    }\n    for (const t of payload.data) {\n      newPrices[t.symbol] = {\n        ticker: t.symbol.toUpperCase(),\n        price: t.ask.toFixed(8),\n      };\n    }\n    return newPrices;\n  }\n\n  cryptoCompareQueryResultParse(payload) {\n    const newPrices = {};\n    if (payload === false) {\n      return newPrices;\n    }\n    const pricesContained = payload;\n    return pricesContained;\n  }\n\n  selectOracle(oracleKey) {\n    const oracles = {\n      CRYPTO_COMPARE: this.cryptoCompareQueryResultParse,\n      BINANCE: this.binanceQueryResultParse,\n      POLONIEX: this.poloniexQueryResultParse,\n      HUOBI: this.huobiQueryResultParse,\n    };\n    return oracles[oracleKey];\n  }\n\n  findEthUsdPairInOracle = (oracleKey) => {\n    const oracles = {\n      CRYPTO_COMPARE: 'USD',\n      BINANCE: 'ETHUSDT',\n      POLONIEX: 'TUSD_ETH',\n      HUOBI: 'ethusdc',\n    };\n    return oracles[oracleKey];\n  };\n\n  getEthUsdPrice() {\n    const oracles = Object.values(this.ethUsdPriceOraclesList);\n    const oracleKeys = Object.keys(this.ethUsdPriceOraclesList);\n    let isResolved = new Subject<boolean>();\n    let oracleToResolve = 0;\n    return of(oracles).pipe(\n      takeUntil(isResolved),\n      switchMap((o) => {\n        return from(fetch(o[oracleToResolve]));\n      }),\n\n      switchMap((r) => {\n        if (r === undefined) {\n          throw false;\n        }\n        return of(r.json());\n      }),\n      switchMap((result) => {\n        const i = oracleToResolve;\n        const oKey = oracleKeys[i];\n        return this.selectOracle(oKey)(result);\n      }),\n      switchMap((parsedResult) => {\n        const i = oracleToResolve;\n        const oKey = oracleKeys[i];\n        const ethUsdPrice = parsedResult[this.findEthUsdPairInOracle(oKey)];\n        isResolved.next(false);\n        return of(ethUsdPrice);\n      }),\n      retryWhen((error) =>\n        error.pipe(\n          delayWhen((e) => {\n            oracleToResolve++;\n            if (oracleToResolve >= oracles.length - 1) {\n              oracleToResolve = 0;\n            }\n            return timer(500);\n          })\n        )\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MiscUtilsService } from '../misc-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DownloadService {\n  constructor(protected mistUtils: MiscUtilsService) {}\n\n  download(meta: string, dataRaw: any) {\n    const data = new TextEncoder().encode(dataRaw);\n    const blob = new Blob(['\\uFEFF', data], {\n      type: 'text/csv;charset=utf-8',\n    });\n    var fileURL = URL.createObjectURL(blob);\n    window.open(fileURL, '_target');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport request, { gql } from 'graphql-request';\nimport { Observable } from 'rxjs';\nimport { ens_normalize } from '@adraffy/ens-normalize';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EnsService {\n  constructor(private http: HttpClient) {}\n\n  getDomainMetadata(domainHash: string) {\n    const url = environment.networks[environment.defaultChain].ensMetadataAPI;\n    return this.http.get(url + domainHash);\n  }\n\n  findDomains(domains: string[]) {\n    const url = environment.networks[environment.defaultChain].ensGraphQLAPI;\n    return new Observable((observer) => {\n      const query = gql`\n        query ($domainNames: [String!]) {\n          registrations(first: 1000, where: { labelName_in: $domainNames }) {\n            id\n            labelName\n            expiryDate\n            registrationDate\n            domain {\n              createdAt\n            }\n          }\n        }\n      `;\n      request(url, query, { domainNames: domains }).then((data) => {\n        observer.next(data);\n        observer.complete();\n      });\n    });\n  }\n\n  getDomain(domain: string) {\n    const url = environment.networks[environment.defaultChain].ensGraphQLAPI;\n    return new Observable((observer) => {\n      const query = gql`\n        query ($domainName: String!) {\n          registrations(first: 1, where: { labelName: $domainName }) {\n            id\n            labelName\n            expiryDate\n            registrationDate\n            registrant {\n              id\n            }\n            domain {\n              createdAt\n              labelhash\n            }\n            events {\n              blockNumber\n              transactionID\n            }\n          }\n        }\n      `;\n      request(url, query, { domainName: domain }).then((data) => {\n        observer.next(data);\n        observer.complete();\n      });\n    });\n  }\n\n  downloadDomainsListCSV(domains: ENSDomainMetadataModel[]) {\n    let finalForm = '';\n    finalForm +=\n      Object.keys(domains[0])\n        .filter((k) => {\n          if (k === 'events') {\n            return false;\n          }\n          return true;\n        })\n        .join(',') + '\\n';\n    finalForm += domains\n      .map((d) => {\n        const k = Object.keys(d);\n        return k\n          .map((kk) => {\n            return d[kk];\n          })\n          .join(',');\n      })\n      .join('\\n');\n    return finalForm;\n  }\n\n  calculateExpiry(expiryDate: string) {\n    const eDate = parseInt(expiryDate, 10) * 1000;\n    const now = new Date().getTime();\n    const remainingDate = now - eDate;\n    return remainingDate;\n  }\n\n  calculateGracePeriodPercentage(expiryDate: number) {\n    const now = new Date().getTime();\n    const gracePeriod = 7889400000;\n    const timeUtilGraceEnds = expiryDate * 1000 + gracePeriod;\n    const gracePeriodExact = timeUtilGraceEnds - now;\n    const gInPercent = gracePeriod / 100;\n    return gracePeriodExact / gInPercent;\n  }\n\n  isDomainNameNotValid(name: string) {\n    if (name === '' || name.length < 3) {\n      return false;\n    }\n    try {\n      ens_normalize(name + '.eth');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  calculateDomainsPrice(\n    name: string,\n    ethToUsdRate: string,\n    duration: number = 1\n  ) {\n    const ethUsdRate = parseInt(ethToUsdRate, 10);\n    let nameCost = 5;\n    switch (name.length) {\n      case 3:\n        {\n          nameCost = 640;\n        }\n        break;\n      case 4:\n        {\n          nameCost = 160;\n        }\n        break;\n    }\n    return parseFloat((nameCost / ethUsdRate).toFixed(4)) * duration;\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class FormValidationService {\n  constructor() {}\n\n  markFormGroupTouched(formGroup: FormGroup) {\n    (Object as any).values(formGroup.controls).forEach((control) => {\n      control.markAsTouched();\n\n      if (control.controls) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Resolve,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { routerPaths } from 'src/app/models/router-paths.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PathResolveService implements Resolve<string | null> {\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): string | null {\n    const typoPath = state.url.replace('/', '');\n    const threshold = this.getThreshold(typoPath);\n    const dictionary = Object.values(routerPaths).filter(\n      (path) => Math.abs(path.length - typoPath.length) < threshold\n    ) as string[];\n    if (!dictionary.length) {\n      return null;\n    }\n    this.sortByDistances(typoPath, dictionary);\n    return `/${dictionary[0]}`;\n  }\n\n  getThreshold(path: string): number {\n    if (path.length < 5) {\n      return 3;\n    }\n    return 5;\n  }\n\n  sortByDistances(typoPath: string, dictionary: string[]) {\n    const pathsDistance = {} as { [name: string]: number };\n    dictionary.sort((a, b) => {\n      if (!(a in pathsDistance)) {\n        pathsDistance[a] = this.levenshtein(a, typoPath);\n      }\n      if (!(b in pathsDistance)) {\n        pathsDistance[b] = this.levenshtein(b, typoPath);\n      }\n\n      return pathsDistance[a] - pathsDistance[b];\n    });\n  }\n\n  levenshtein(a: string, b: string): number {\n    if (a.length === 0) {\n      return b.length;\n    }\n    if (b.length === 0) {\n      return a.length;\n    }\n    const matrix = [];\n    for (let i = 0; i <= b.length; i++) {\n      matrix[i] = [i];\n    }\n    for (let j = 0; j <= a.length; j++) {\n      matrix[0][j] = j;\n    }\n    for (let i = 1; i <= b.length; i++) {\n      for (let j = 1; j <= a.length; j++) {\n        if (b.charAt(i - 1) === a.charAt(j - 1)) {\n          matrix[i][j] = matrix[i - 1][j - 1];\n        } else {\n          matrix[i][j] = Math.min(\n            matrix[i - 1][j - 1] + 1,\n            matrix[i][j - 1] + 1,\n            matrix[i - 1][j] + 1\n          );\n        }\n      }\n    }\n    return matrix[b.length][a.length];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport TrezorConnect from 'trezor-connect';\nimport { MiscUtilsService } from '../misc-utils';\nimport { PagesFacadeService } from '../../store/facades';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BigNumber, utils } from 'ethers';\nimport { generalConfigurations } from 'src/app/configurations';\n\ninterface TrezorSignedTransactionModel {\n  id: number;\n  success: boolean;\n  payload: {\n    v: string;\n    r: string;\n    s: string;\n  };\n}\n\ninterface TrezorGetAccountInfoResultModel {\n  id: number;\n  success: boolean;\n  payload: {\n    availableBalance: string;\n    balance: string;\n    descriptor: string;\n    empty: boolean;\n    history: {\n      tokens: string[];\n      total: number;\n      transactions: any[];\n      unconfirmed: number;\n    };\n    misc: {\n      nonce: string;\n    };\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrezorService {\n  constructor(\n    public miscUtils: MiscUtilsService,\n    public pagesFacade: PagesFacadeService\n  ) {}\n\n  connect(time: number) {\n    return new Observable((observer) => {\n      TrezorConnect.init({\n        lazyLoad: false,\n        webusb: true,\n        popup: true,\n        manifest: generalConfigurations.trezorManifest,\n      })\n        .then((r) => {\n          return TrezorConnect.getAccountInfo({\n            path: \"m/44'/60'/0'/0/0\",\n            coin: 'eth',\n          });\n        })\n        .then((r) => {\n          const result = r as any as TrezorGetAccountInfoResultModel;\n          if (r === undefined) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          observer.next(result.payload.descriptor);\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n          return;\n        });\n    });\n  }\n\n  signPayment(payload: any) {\n    return new Observable((observer) => {\n      TrezorConnect.getAccountInfo({\n        path: \"m/44'/60'/0'/0/0\",\n        coin: 'eth',\n      })\n        .then((r) => {\n          const accountInfo = r as any as TrezorGetAccountInfoResultModel;\n          return TrezorConnect.ethereumSignTransaction({\n            path: \"m/44'/60'/0'/0/0\",\n            transaction: {\n              ...payload,\n              from: accountInfo.payload.descriptor,\n              nonce: BigNumber.from(payload.nonce).toHexString(),\n            },\n          });\n        })\n        .then((r) => {\n          const signed = r as any as TrezorSignedTransactionModel;\n          if (\n            signed === null ||\n            signed.success === false ||\n            signed === undefined\n          ) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          observer.next(\n            utils.serializeTransaction(payload, {\n              v: BigNumber.from(signed.payload.v).toNumber(),\n              r: signed.payload.r,\n              s: signed.payload.s,\n            })\n          );\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getWeb3Provider() {\n    return new Observable((observer) => {\n      detectEthereumProvider()\n        .then((p) => {\n          observer.next(p);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(null);\n          observer.complete();\n        });\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { icons, imageToPreload } from 'src/app/configurations';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconRegistryService {\n  constructor() {}\n\n  injectCustomIcons() {\n    return icons;\n  }\n\n  perloadCustomIcons() {\n    const ic = this.injectCustomIcons();\n    for (const i of Object.keys(ic).map((ici) => ic[ici])) {\n      const ii = new Image();\n      ii.src = i;\n    }\n    const icc = imageToPreload;\n    for (const i of Object.keys(ic).map((ici) => ic[ici])) {\n      const ii = new Image();\n      ii.src = i;\n    }\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { MiscUtilsService } from \"../../misc-utils\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class PaymentEffectsService {\n  constructor(protected miscUtils: MiscUtilsService) {}\n\n  recordLastConnectionAddress(connectionAddress: string) {\n    localStorage.setItem(\"ps-last-connection\", connectionAddress);\n  }\n\n  getLastConnectionAddress() {\n    const lConnectionAddres = localStorage.getItem(\"ps-last-connection\");\n    if (\n      lConnectionAddres === null ||\n      lConnectionAddres === \"\" ||\n      lConnectionAddres === undefined\n    ) {\n      return false;\n    }\n    return lConnectionAddres;\n  }\n}\n","import { Router } from '@angular/router';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { UserFacadeService } from '../../store/facades';\n\n@Injectable({ providedIn: 'root' })\nexport class Intercept implements HttpInterceptor {\n  constructor(router: Router, public userFacade: UserFacadeService) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(req);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { MiscUtilsService } from '../misc-utils';\nimport TransportUSB from '@ledgerhq/hw-transport-webusb';\nimport LedgerEth from '@ledgerhq/hw-app-eth';\nimport { PagesFacadeService } from '../../store/facades';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\ninterface LedgerSignResultModel {\n  v: number;\n  r: string;\n  s: string;\n}\n\ninterface LedgerGetAddressResultModel {\n  address: string;\n  chainCode: string;\n  publicKey: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LedgerService {\n  transport: any;\n  ledger: LedgerEth;\n\n  constructor(\n    public miscUtils: MiscUtilsService,\n    public pagesFacade: PagesFacadeService\n  ) {}\n\n  connect(time: number) {\n    return new Observable((observer) => {\n      TransportUSB.create()\n        .then((r) => {\n          this.transport = r;\n          this.ledger = new LedgerEth(r);\n          return this.ledger.getAddress(\"m/44'/60'/0'/0/0\");\n        })\n        .then((r: any) => {\n          if (r === false) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          const result = r as any as LedgerGetAddressResultModel;\n          observer.next(result.address);\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n          return;\n        });\n    });\n  }\n\n  createTransport() {\n    return new Observable((observer) => {\n      TransportUSB.create().then((r) => {\n        this.transport = r;\n        this.ledger = new LedgerEth(r);\n        observer.next(this.ledger);\n        observer.complete();\n        return;\n      });\n    });\n  }\n\n  signPayment(payload: string) {\n    return new Observable((observer) => {\n      this.ledger\n        .signTransaction(\"m/44'/60'/0'/0/0\", payload.substring(2))\n        .then((r) => {\n          if (r === null || r === undefined) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          const signed = r as any as LedgerSignResultModel;\n          observer.next(signed);\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getWeb3Provider() {\n    return new Observable((observer) => {\n      detectEthereumProvider()\n        .then((p) => {\n          observer.next(p);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(null);\n          observer.complete();\n        });\n    });\n  }\n}\n","import * as Ethers from 'ethers';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { MiscUtilsService } from '../misc-utils';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { PagesFacadeService, UserFacadeService } from '../../store/facades';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\ndeclare const ethereum;\n@Injectable({\n  providedIn: 'root',\n})\nexport class MetamaskService {\n  constructor(\n    public miscUtils: MiscUtilsService,\n    public userFacadeService: UserFacadeService,\n    public pagesFacade: PagesFacadeService\n  ) {}\n\n  connect(time: number) {\n    return this.getAccounts().pipe(\n      switchMap((a) => {\n        const accounts = a as any;\n        if (\n          accounts === undefined ||\n          accounts === null ||\n          accounts.length <= 0\n        ) {\n          return of(false);\n        }\n        return of(a[0]);\n      }),\n      catchError((e) => {\n        return of(false);\n      })\n    );\n  }\n\n  chainChangedDetectionDaemon() {\n    ethereum.on('chainChanged', (chainId) => {\n      this.pagesFacade.setNetworkChainCode(parseInt(chainId, 16));\n    });\n  }\n\n  getChainId() {\n    return ethereum.networkVersion;\n  }\n\n  getAccounts() {\n    return new Observable((observer) => {\n      ethereum\n        .request({ method: 'eth_requestAccounts' })\n        .then((accounts) => {\n          if (\n            accounts === null ||\n            accounts.length <= 0 ||\n            accounts === undefined\n          ) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          observer.next(\n            accounts.map((a) => {\n              return Ethers.utils.getAddress(a);\n            })\n          );\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  signPayment(payloadHash: any) {\n    return new Observable((observer) => {\n      detectEthereumProvider()\n        .then((p: any) => {\n          return p.request({\n            method: 'eth_sendTransaction',\n            params: payloadHash,\n          });\n        })\n        .then((tx) => {\n          if (tx === null || tx.length <= 0 || tx === undefined) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          observer.next(tx);\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getWeb3Provider() {\n    return new Observable((observer) => {\n      detectEthereumProvider()\n        .then((p) => {\n          observer.next(p);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(null);\n          observer.complete();\n        });\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ethers } from 'ethers';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MiscUtilsService {\n  constructor() {}\n\n  roundUp(num: number, roundTo: number) {\n    return Math.round(num / roundTo) * roundTo;\n  }\n\n  testJSON(json) {\n    const str = json.toString();\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n\n  checksumEtheruemAddress(address: string) {\n    try {\n      return (\n        ethers.utils.getAddress(address).toLowerCase() === address.toLowerCase()\n      );\n    } catch (e) {\n      return false;\n    }\n  }\n\n  commafied(num: string) {\n    if (num.toString().indexOf('.') <= -1) {\n      return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    } else {\n      const parts = num.toString().split('.');\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n      return parts.join('.');\n    }\n  }\n\n  prependToArray(value: any, array: any[]) {\n    var newArray = array.slice();\n    newArray.unshift(value);\n    return newArray;\n  }\n\n  toHex(str: string) {\n    const rb = new TextEncoder().encode(str);\n    let r = '';\n    for (const b of rb) {\n      r += ('0' + b.toString(16)).slice(-2);\n    }\n    return r;\n  }\n\n  testNumeric() {\n    const reg = new RegExp(/^(0|[1-9]\\d*)(\\.\\d+)?$/);\n    return reg;\n  }\n\n  testAlphaNumeric() {\n    const reg = new RegExp('^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$');\n    return reg;\n  }\n\n  testAlpha() {\n    const reg = new RegExp('^[A-Za-z]+$');\n    return reg;\n  }\n\n  testEmoji() {\n    const reg = new RegExp(/\\p{Extended_Pictographic}/u);\n    return reg;\n  }\n\n  testIntNumeric() {\n    const reg = new RegExp('^[0-9]+$');\n    return reg;\n  }\n}\n","export enum PaymentStoreErrorsEnum {\n  UNKOWN = \"UNKNOWN_PAYMENT\",\n  NO_NETWORK_CONNECTION = \"NO_NETWORK_CONNECTION\",\n  QRSCANNER_CAMERA_NO_PERMISSION = \"QRSCANNER_CAMERA_NO_PERMISSION\",\n  QRSCANNED_RESULT_ERROR = \"QRSCANNED_RESULT_ERROR\",\n  QRSCAN_CANCELLED = \"QRSCAN_CANCELLED\",\n  PIN_INVALID = \"PIN_INVALID\",\n  SIGNING_PAYMENT_ERROR = \"SIGNING_PAYMENT_ERROR\",\n  QRSCANNED_WALLET_ADDRESS_INVALID = \"QRSCANNED_WALLET_ADDRESS_INVALID\",\n  PAYMENT_RELAY_FAILED = \"PAYMENT_RELAY_FAILED\",\n  PAYMENT_FAILED_AMOUNT_ZERO = \"PAYMENT_FAILED_AMOUNT_ZERO\",\n  PAYMENT_FAILED_INSUFFICIENT_FUNDS = \"PAYMENT_FAILED_INSUFFICIENT_FUNDS\",\n  PAYMENT_FAILED_EXPIRED = \"PAYMENT_FAILED_EXPIRED\",\n  PAYMENT_FAILED_TOKEN_NOT_SUPPORTED = \"PAYMENT_FAILED_TOKEN_NOT_SUPPORTED\",\n  PAYMENT_FAILED_UNKNOWN = \"PAYMENT_FAILED_UNKNOWN\",\n  PAYMENT_FAILED_SIGNATURE_INVALID = \"PAYMENT_FAILED_SIGNATURE_INVALID\",\n  PAYMENT_FAILED_PAYEE_ADDRESS_INVALID = \"PAYMENT_FAILED_PAYEE_ADDRESS_INVALID\",\n  PAYMENT_FAILED_WITHDRAW_FAILURE = \"PAYMENT_FAILED_WITHDRAW_FAILURE\",\n  PAYMENT_FAILED_WALLET_INITIALISATION_FAILURE = \"PAYMENT_FAILED_WALLET_INITIALISATION_FAILURE\",\n  PAYMENT_FAILED_WALLET_RECOVERY_FAILURE = \"PAYMENT_FAILED_WALLET_RECOVERY_FAILURE\",\n  PAYMENT_FAILED_EXCHANGE_CURRENCIES_DUPLICATE = \"PAYMENT_FAILED_EXCHANGE_CURRENCIES_DUPLICATE\",\n  PAYMENT_FAILED_INSUFFICIENT_LIQUIDITY = \"PAYMENT_FAILED_INSUFFICIENT_LIQUIDITY\",\n  PAYMENT_FAILED_NONCE_COLLUSION = \"PAYMENT_FAILED_NONCE_COLLUSION\",\n  PAYMENT_FAILED_SERVER_BUSY = \"PAYMENT_FAILED_SERVER_BUSY\",\n  PAYMENT_FAILED_MARKET_CLOSED = \"PAYMENT_FAILED_MARKET_CLOSED\",\n  PAYMENT_FAILED_WALLET_ID_TAKEN = \"PAYMENT_FAILED_WALLET_ID_TAKEN\",\n  PAYMENT_FAILED_MARKET_NOT_SUPPORTED = \"PAYMENT_FAILED_MARKET_NOT_SUPPORTED\",\n  PAYMENT_FAILED_MULTISIG_QUORUM_FAILED = \"PAYMENT_FAILED_MULTISIG_QUORUM_FAILED\",\n  PAYMENT_FAILED_MULTISIG_STORAGE_FULL = \"PAYMENT_FAILED_MULTISIG_STORAGE_FULL\",\n  PAYMENT_FAILED_MULTISIG_NO_ENTRY = \"PAYMENT_FAILED_MULTISIG_NO_ENTRY\",\n  PAYMENT_HISTORY_REMOVAL_FAILED = \"PAYMENT_HISTORY_REMOVAL_FAILED\",\n  PAYMENT_FAILED_ALREADY_FULFILLED = \"PAYMENT_FAILED_ALREADY_FULFILLED\",\n}\n","import { Injectable } from \"@angular/core\";\nimport { PaymentStoreErrorsEnum } from \"../../models/error-enums\";\nimport { PaymentErrorCodes } from \"../../models/states/payment-interfaces\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class PaymentErrorService {\n  constructor() {}\n\n  getPaymentErrorTranslatedTextKey(paymentError: PaymentStoreErrorsEnum) {\n    switch (paymentError) {\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_AMOUNT_ZERO:\n        {\n          return \"ERRORS.PAYMENT_FAILED_INSUFFICIENT_FUNDS\";\n        }\n        break;\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_INSUFFICIENT_FUNDS:\n        {\n          return \"ERRORS.PAYMENT_FAILED_INSUFFICIENT_FUNDS\";\n        }\n        break;\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_EXPIRED:\n        {\n          return \"ERRORS.PAYMENT_FAILED_EXPIRED\";\n        }\n        break;\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_UNKNOWN:\n        {\n          return \"ERRORS.PAYMENT_FAILED_UNKNOWN\";\n        }\n        break;\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_TOKEN_NOT_SUPPORTED:\n        {\n          return \"ERRORS.PAYMENT_FAILED_TOKEN_NOT_SUPPORTED\";\n        }\n        break;\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_WALLET_INITIALISATION_FAILURE:\n        {\n          return \"ERRORS.PAYMENT_FAILED_WALLET_INITIALISATION_FAILURE\";\n        }\n        break;\n\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_SIGNATURE_INVALID:\n        {\n          return \"ERRORS.PAYMENT_FAILED_SIGNATURE_INVALID\";\n        }\n        break;\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_WITHDRAW_FAILURE:\n        {\n          return \"ERRORS.PAYMENT_FAILED_WITHDRAW_FAILURE\";\n        }\n        break;\n\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_WALLET_ID_TAKEN:\n        {\n          return \"ERRORS.PAYMENT_FAILED_WALLET_ID_TAKEN\";\n        }\n        break;\n\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_MULTISIG_QUORUM_FAILED:\n        {\n          return \"ERRORS.PAYMENT_FAILED_MULTISIG_QUORUM_FAILED\";\n        }\n        break;\n\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_MULTISIG_STORAGE_FULL:\n        {\n          return \"ERRORS.PAYMENT_FAILED_MULTISIG_STORAGE_FULL\";\n        }\n        break;\n\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_MULTISIG_NO_ENTRY:\n        {\n          return \"ERRORS.PAYMENT_FAILED_MULTISIG_NO_ENTRY\";\n        }\n        break;\n    }\n  }\n  getPaymentErrorEnumKey(errorCode: PaymentErrorCodes) {\n    switch (errorCode) {\n      case PaymentErrorCodes.AMOUNT_ZERO:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_AMOUNT_ZERO;\n        }\n        break;\n      case PaymentErrorCodes.INSUFFICIENT_FUNDS:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_INSUFFICIENT_FUNDS;\n        }\n        break;\n      case PaymentErrorCodes.PAYMENT_EXPIRED:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_EXPIRED;\n        }\n        break;\n      case PaymentErrorCodes.PAYMENT_FAILURE:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_UNKNOWN;\n        }\n        break;\n      case PaymentErrorCodes.TOKEN_NOT_SUPPORTED:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_TOKEN_NOT_SUPPORTED;\n        }\n        break;\n      case PaymentErrorCodes.SIGNATURE_INVALID:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_WALLET_INITIALISATION_FAILURE;\n        }\n        break;\n      case PaymentErrorCodes.MARKET_NOT_SUPPORTED:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_MARKET_NOT_SUPPORTED;\n        }\n        break;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PaymentModel } from 'src/app/models/states/payment-interfaces';\n\nconst globalAny: any = global;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentStorageService {\n  constructor() {}\n\n  get networkName() {\n    return globalAny.networkName;\n  }\n\n  savePayments(paymentData: PaymentModel[]) {\n    localStorage.setItem('canvas-payments-data', JSON.stringify(paymentData));\n  }\n\n  loadPayments() {\n    const l = localStorage.getItem('canvas-payments-data');\n    if (l === null || l === '[]' || l === '') {\n      return false;\n    }\n    return JSON.parse(l);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserService } from '../user';\nimport { CurrencyService } from '../currency';\nimport { WalletService } from '../wallet';\nimport { PaymentModel } from 'src/app/models/states/payment-interfaces';\nimport { Observable } from 'rxjs';\nimport { BigNumber, ethers } from 'ethers';\nimport { Provider } from '@ethersproject/abstract-provider';\n\nconst globalAny: any = global;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentService {\n  constructor(\n    protected userService: UserService,\n    protected currencyService: CurrencyService,\n    protected walletService: WalletService\n  ) {}\n\n  prepareTransaction(\n    chainId: number,\n    nonce: number,\n    toAddress: string,\n    gasLimit: string,\n    gasPrice: string,\n    payment: PaymentModel\n  ) {\n    const paymentLoad = {\n      chainId: chainId,\n      nonce: nonce,\n      to: toAddress,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      value: payment.paymentTotal,\n      data: payment.paymentAbstractBytesSlot,\n    };\n    return paymentLoad;\n  }\n\n  resolveAddressOfEth(provider: Provider, walletAddress: string) {\n    return new Observable((observer) => {\n      provider.resolveName(walletAddress).then((n) => {\n        observer.next(n);\n        observer.complete();\n      });\n    });\n  }\n\n  getWalletNonce(provider: Provider, walletAddress: string) {\n    return new Observable((observer) => {\n      provider.getTransactionCount(walletAddress).then((n) => {\n        observer.next(n);\n        observer.complete();\n      });\n    });\n  }\n\n  getGasPrice(provider: Provider) {\n    return new Observable((observer) => {\n      provider\n        .getFeeData()\n        .then((feeData) => {\n          observer.next(feeData);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n}\n","export const ENSBulkRegistrationContractMainnetABI = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'string',\n            name: 'name',\n            type: 'string',\n          },\n          {\n            internalType: 'address',\n            name: 'owner',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'duration',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'secret',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'address',\n            name: 'resolver',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes[]',\n            name: 'data',\n            type: 'bytes[]',\n          },\n          {\n            internalType: 'bool',\n            name: 'reverseRecord',\n            type: 'bool',\n          },\n          {\n            internalType: 'uint32',\n            name: 'fuses',\n            type: 'uint32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'wrapperExpiry',\n            type: 'uint64',\n          },\n        ],\n        internalType: 'struct ENSCommitment.Commitment[]',\n        name: 'commitments',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bool',\n        name: 'withConfigs',\n        type: 'bool',\n      },\n    ],\n    name: 'createCommitmentsForRegistration',\n    outputs: [\n      {\n        internalType: 'bytes32[]',\n        name: '',\n        type: 'bytes32[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: '',\n        type: 'uint256[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n    constant: true,\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32[]',\n        name: 'commitments',\n        type: 'bytes32[]',\n      },\n    ],\n    name: 'requestRegistration',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string[]',\n        name: 'names',\n        type: 'string[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'priceRanges',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'nameLengths',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n    ],\n    name: 'completeRegistration',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n    payable: true,\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string[]',\n        name: 'names',\n        type: 'string[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'priceRanges',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'nameLengths',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'completeRegistrationWithConfigs',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n    payable: true,\n  },\n];\n","export const ENSBulkRegistrationContractTestnetABI = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'string',\n            name: 'name',\n            type: 'string',\n          },\n          {\n            internalType: 'address',\n            name: 'owner',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'duration',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'secret',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'address',\n            name: 'resolver',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes[]',\n            name: 'data',\n            type: 'bytes[]',\n          },\n          {\n            internalType: 'bool',\n            name: 'reverseRecord',\n            type: 'bool',\n          },\n          {\n            internalType: 'uint32',\n            name: 'fuses',\n            type: 'uint32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'wrapperExpiry',\n            type: 'uint64',\n          },\n        ],\n        internalType: 'struct ENSCommitment.Commitment[]',\n        name: 'commitments',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bool',\n        name: 'withConfigs',\n        type: 'bool',\n      },\n    ],\n    name: 'createCommitmentsForRegistration',\n    outputs: [\n      {\n        internalType: 'bytes32[]',\n        name: '',\n        type: 'bytes32[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: '',\n        type: 'uint256[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n    constant: true,\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32[]',\n        name: 'commitments',\n        type: 'bytes32[]',\n      },\n    ],\n    name: 'requestRegistration',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string[]',\n        name: 'names',\n        type: 'string[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'priceRanges',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'nameLengths',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n    ],\n    name: 'completeRegistration',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n    payable: true,\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string[]',\n        name: 'names',\n        type: 'string[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'priceRanges',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'nameLengths',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'completeRegistrationWithConfigs',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n    payable: true,\n  },\n];\n","import { Injectable } from '@angular/core';\nimport { BigNumber, Contract, utils } from 'ethers';\nimport { Observable } from 'rxjs';\nimport {\n  bulkRegistrationMainnet,\n  bulkRegistrationTestnet,\n} from 'src/app/configurations';\nimport { ENSBulkRegistrationContractMainnetABI } from 'src/app/configurations/contracts/ens-bulk-registration-mainnet.abi';\nimport { ENSBulkRegistrationContractTestnetABI } from 'src/app/configurations/contracts/ens-bulk-registration-testnet.abi';\nimport { payNoMarketAddress } from 'src/app/models';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport {\n  ENSRegistrationCommitmentModel,\n  ENSRegistrationCommmitmentRequestResultModel,\n} from 'src/app/models/states/ens-registration-interfaces';\nimport { PaymentModel } from 'src/app/models/states/payment-interfaces';\nimport { environment } from 'src/environments/environment';\nimport { MiscUtilsService } from '../misc-utils';\nimport { PaymentService } from '../payment';\n\nconst gloalAny: any = global;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegistrationFacilityService {\n  constructor(\n    protected miscUtilsService: MiscUtilsService,\n    protected paymentService: PaymentService\n  ) {}\n\n  registrationDomainsToCommitmentPacket(\n    owner: string,\n    duration: number,\n    secret: string,\n    resolver: string,\n    commitments: ENSDomainMetadataModel[]\n  ) {\n    let compiled = [];\n    for (const c of commitments) {\n      const nc = {\n        name: c.labelName,\n        owner: owner,\n        duration: BigNumber.from(duration),\n        secret: secret,\n        resolver: resolver,\n        data: [],\n        reverseRecord: resolver !== payNoMarketAddress ? true : false,\n        fuses: 0,\n        wrapperExpiry: 0,\n        metadata: c,\n      } as ENSRegistrationCommitmentModel;\n      compiled.push(nc);\n    }\n    return compiled;\n  }\n\n  commitmentPacketToRegistrationDomains(\n    commitments: ENSRegistrationCommitmentModel[]\n  ) {\n    let decompiled = [];\n    for (const c of commitments) {\n      const nc = c.metadata as ENSDomainMetadataModel;\n      decompiled.push(nc);\n    }\n    return decompiled;\n  }\n\n  createRegistrationCommitmentPacket(\n    commitments: ENSRegistrationCommitmentModel[],\n    provider\n  ) {\n    const contract = this.getEnsBulkRegistrationContract(provider);\n    const comitmentsPrepared = [];\n    for (const c of commitments) {\n      const nCP = [\n        c.name,\n        c.owner,\n        c.duration,\n        c.secret,\n        c.resolver,\n        c.data,\n        c.reverseRecord,\n        c.fuses,\n        c.wrapperExpiry,\n      ] as any;\n      nCP.name = c.name;\n      nCP.owner = c.owner;\n      nCP.duration = c.duration;\n      nCP.secret = c.secret;\n      nCP.resolver = c.resolver;\n      nCP.data = c.data;\n      nCP.reverseRecord = c.reverseRecord;\n      nCP.fuses = c.fuses;\n      nCP.wrapperExpiry = c.wrapperExpiry;\n      comitmentsPrepared.push(nCP);\n    }\n    const isResolverSet = comitmentsPrepared[0].resolver !== payNoMarketAddress;\n    const duration = comitmentsPrepared[0].duration;\n    let commitmentResult, gasLimit;\n    return new Observable((observer) => {\n      contract\n        .createCommitmentsForRegistration(\n          comitmentsPrepared,\n          duration,\n          isResolverSet\n        )\n        .then((r) => {\n          commitmentResult = r;\n          return this.getGasLimitEstimation(\n            provider,\n            'createCommitmentsForRegistration',\n            [comitmentsPrepared, duration, isResolverSet]\n          )\n            .toPromise()\n            .catch((e) => {\n              return null;\n            });\n        })\n        .then((r) => {\n          if (\n            r === false ||\n            r === null ||\n            commitmentResult === false ||\n            commitmentResult === null\n          ) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          gasLimit = this.miscUtilsService.roundUp(\n            (r as BigNumber).toNumber(),\n            50000\n          );\n          observer.next([\n            {\n              commitments: commitmentResult[0],\n              priceRanges: commitmentResult[1],\n            } as ENSRegistrationCommmitmentRequestResultModel,\n            gasLimit,\n          ]);\n          observer.complete();\n          return;\n        });\n    });\n  }\n\n  createRegistrationRequestPaymentPacket(\n    commitmentsPrepared: string[],\n    provider\n  ) {\n    const contract = this.getEnsBulkRegistrationContract(provider);\n    const dataInput = contract.interface.encodeFunctionData(\n      'requestRegistration',\n      [commitmentsPrepared]\n    );\n    return dataInput;\n  }\n\n  decodeRegistrationPacket(abstractData: string, value: BigNumber) {\n    const contract = this.getEnsBulkRegistrationContract();\n    const dataInput = contract.interface.parseTransaction({\n      data: abstractData,\n      value,\n    });\n    return dataInput;\n  }\n\n  completeRegistration(\n    commitments: ENSRegistrationCommitmentModel[],\n    priceRanges: BigNumber[],\n    totalCost: string,\n    provider\n  ) {\n    const contract = this.getEnsBulkRegistrationContract(provider);\n    const names = [];\n    const namesLengths = [];\n    const secret = commitments[0].secret;\n    const resolver = commitments[0].resolver;\n    const owner = commitments[0].owner;\n    const duration = commitments[0].duration;\n    for (const c of commitments) {\n      names.push(c.name);\n      namesLengths.push(c.name.length);\n    }\n    const dataMethod =\n      commitments[0].resolver === payNoMarketAddress\n        ? 'completeRegistration'\n        : 'completeRegistrationWithConfigs';\n    const dataParams =\n      commitments[0].resolver === payNoMarketAddress\n        ? [names, priceRanges, namesLengths, owner, duration, secret]\n        : [names, priceRanges, namesLengths, duration, secret, resolver, owner];\n    const dataInput = contract.interface.encodeFunctionData(\n      dataMethod,\n      dataParams\n    );\n    let gasLimit;\n    const preparedTx = {\n      to: this.bulkRegistrationContractAddress,\n      data: dataInput,\n      value: totalCost,\n    };\n    return new Observable((observer) => {\n      this.getGasLimitEstimation(provider, 'sendTransaction', preparedTx, true)\n        .toPromise()\n        .then((r) => {\n          if (r === false || r === null) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          gasLimit = this.miscUtilsService.roundUp(\n            (r as BigNumber).toNumber(),\n            50000\n          );\n          observer.next([dataInput, gasLimit]);\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getEnsBulkRegistrationContract(provider = null) {\n    const c = new Contract(\n      this.bulkRegistrationContractAddress,\n      this.BulkRegistrationContractABI,\n      provider\n    );\n    return c;\n  }\n\n  getGasLimitEstimation(\n    provider = null,\n    method: string,\n    params: any,\n    providerFunction = false\n  ) {\n    const c = new Contract(\n      this.bulkRegistrationContractAddress,\n      this.BulkRegistrationContractABI,\n      provider\n    );\n    return new Observable((observer) => {\n      if (providerFunction === false) {\n        c.estimateGas[method](...params).then((r) => {\n          if (r === null) {\n            observer.next(r);\n            observer.complete();\n          }\n          observer.next(r);\n          observer.complete();\n        });\n      } else {\n        provider.estimateGas(params).then((r) => {\n          if (r === null) {\n            observer.next(r);\n            observer.complete();\n          }\n          observer.next(r);\n          observer.complete();\n        });\n      }\n    });\n  }\n\n  get BulkRegistrationContractABI() {\n    if (environment.test === true) {\n      return ENSBulkRegistrationContractTestnetABI;\n    }\n    return ENSBulkRegistrationContractMainnetABI;\n  }\n\n  get bulkRegistrationContractAddress() {\n    if (environment.test === true) {\n      return bulkRegistrationTestnet;\n    }\n    return bulkRegistrationMainnet;\n  }\n}\n","export const EnsTestnetABI = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n    name: 'ApprovalForAll',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'NewOwner',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n    ],\n    name: 'NewResolver',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'NewTTL',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'setRecord',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'setSubnodeRecord',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'setSubnodeOwner',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n    ],\n    name: 'setResolver',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'setOwner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'setTTL',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'owner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'resolver',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'ttl',\n    outputs: [\n      {\n        internalType: 'uint64',\n        name: '',\n        type: 'uint64',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'recordExists',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n    ],\n    name: 'isApprovedForAll',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n","export const EnsABI = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n    name: 'ApprovalForAll',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'NewOwner',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n    ],\n    name: 'NewResolver',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'NewTTL',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'setRecord',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'setSubnodeRecord',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'setSubnodeOwner',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n    ],\n    name: 'setResolver',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'setOwner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'setTTL',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'owner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'resolver',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'ttl',\n    outputs: [\n      {\n        internalType: 'uint64',\n        name: '',\n        type: 'uint64',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'recordExists',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n    ],\n    name: 'isApprovedForAll',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n","export const EnsRegistrarControllerTestnetABI = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'cost',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'expires',\n        type: 'uint256',\n      },\n    ],\n    name: 'NameRegistered',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'cost',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'expires',\n        type: 'uint256',\n      },\n    ],\n    name: 'NameRenewed',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'oracle',\n        type: 'address',\n      },\n    ],\n    name: 'NewPriceOracle',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n    ],\n    name: 'rentPrice',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n    ],\n    name: 'valid',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n    ],\n    name: 'available',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n    ],\n    name: 'makeCommitment',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'addr',\n        type: 'address',\n      },\n    ],\n    name: 'makeCommitmentWithConfig',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'commitment',\n        type: 'bytes32',\n      },\n    ],\n    name: 'commit',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n    ],\n    name: 'register',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'addr',\n        type: 'address',\n      },\n    ],\n    name: 'registerWithConfig',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n    ],\n    name: 'renew',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n];\n","export const EnsRegistrarControllerABI = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'cost',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'expires',\n        type: 'uint256',\n      },\n    ],\n    name: 'NameRegistered',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'cost',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'expires',\n        type: 'uint256',\n      },\n    ],\n    name: 'NameRenewed',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'oracle',\n        type: 'address',\n      },\n    ],\n    name: 'NewPriceOracle',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n    ],\n    name: 'rentPrice',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n    ],\n    name: 'valid',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n    ],\n    name: 'available',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n    ],\n    name: 'makeCommitment',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'addr',\n        type: 'address',\n      },\n    ],\n    name: 'makeCommitmentWithConfig',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'commitment',\n        type: 'bytes32',\n      },\n    ],\n    name: 'commit',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n    ],\n    name: 'register',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'addr',\n        type: 'address',\n      },\n    ],\n    name: 'registerWithConfig',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n    ],\n    name: 'renew',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n];\n","import { Injectable } from '@angular/core';\nimport { Contract, ethers } from 'ethers';\nimport { ENSContracts } from 'src/app/configurations';\nimport { EnsTestnetABI } from 'src/app/configurations/contracts/ens-abi-testnet.model';\nimport { EnsABI } from 'src/app/configurations/contracts/ens-abi.model';\nimport { EnsRegistrarControllerTestnetABI } from 'src/app/configurations/contracts/ens-registrar-controller-abi-testnet.model';\nimport { EnsRegistrarControllerABI } from 'src/app/configurations/contracts/ens-registrar-controller-abi.model';\nimport { payNoMarketAddress } from 'src/app/models';\nimport { ENSEventModel, EnsEventsEnum } from 'src/app/models/ens';\nimport { environment } from 'src/environments/environment';\n\nexport const registrationTopic =\n  '0xca6abbe9d7f11422cb6ca7629fbf6fe9efb1c621f71ce8f02b9f2a230097404f';\nexport const nameRenewedTopicHash =\n  '0x3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae';\nexport const martketSaleTopics = {\n  SEAPORT: '0xc4109843e0b7d514e4c093114b863f8e7d8d9a458c372cd51bfe526b588006c9',\n  RARIBLE: '0x9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31',\n  X2Y2: '0xe2c49856b032c255ae7e325d18109bc4e22a2804e2e49a017ec0f59f19cd447b',\n  LOOKSRARE:\n    '0x95fb6205e23ff6bda16a2d1dba56b9ad7c783f67c96fa149785052f47696f2be',\n};\nexport enum SortableMarkets {\n  SEAPORT = 'SEAPORT',\n  RARIBLE = 'RARIBLE',\n  X2Y2 = 'X2Y2',\n  LOOKSRARE = 'LOOKSrare',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegistrationDataService {\n  constructor() {}\n\n  resolevTxType(relatedNameLabelHash: string, owner: string, tx: any) {\n    const marketTopics = Object.values(martketSaleTopics);\n    const markets = Object.keys(martketSaleTopics);\n    let qualifiedTx = tx.logs.filter((e) => {\n      if (marketTopics.filter((t) => e.topics.includes(t)).length > 0) {\n        return true;\n      }\n      if (\n        e.topics.includes(owner) ||\n        e.topics.includes(relatedNameLabelHash) ||\n        e.topics.includes(ENSContracts.registrarController)\n      ) {\n        return true;\n      }\n      return false;\n    });\n    let resolvedEventType: ENSEventModel[] = [];\n    const labelHashInHex =\n      ethers.BigNumber.from(relatedNameLabelHash).toHexString();\n    const paymentNoAddressBytes =\n      ethers.BigNumber.from(payNoMarketAddress).toHexString();\n    for (const e of qualifiedTx) {\n      const topicNormalised = e.topics.map((x) => {\n        return ethers.BigNumber.from(x).toHexString();\n      });\n      if (marketTopics.includes(topicNormalised[0])) {\n        const whichMarket = markets[marketTopics.indexOf(topicNormalised[0])];\n        const marketBuyer = this.getMarketBuyer(\n          SortableMarkets[whichMarket],\n          e,\n          topicNormalised,\n          tx\n        );\n        const marketSeller = this.getMarketSeller(\n          SortableMarkets[whichMarket],\n          e,\n          topicNormalised,\n          tx\n        );\n        resolvedEventType.push({\n          type: EnsEventsEnum.SALE,\n          from: marketSeller.toLowerCase(),\n          to: marketBuyer.toLowerCase(),\n          txHash: tx.transactionHash,\n          value: this.txValueToEther(tx.value),\n          date: tx.timestamp,\n        } as ENSEventModel);\n      } else if (\n        (topicNormalised[1] ===\n          ENSContracts.registrarController.toLowerCase() &&\n          topicNormalised[2] !== paymentNoAddressBytes) ||\n        (topicNormalised[0] === registrationTopic &&\n          topicNormalised[1] === labelHashInHex &&\n          topicNormalised[2] === owner)\n      ) {\n        const registrant = topicNormalised[2];\n        resolvedEventType.push({\n          type: EnsEventsEnum.REGISTRATION,\n          from: ENSContracts.registrarController.toLowerCase(),\n          to: registrant.toLowerCase(),\n          txHash: tx.transactionHash,\n          value: this.txValueToEther(tx.value),\n          date: tx.timestamp,\n        } as ENSEventModel);\n      } else if (\n        (topicNormalised[1] === paymentNoAddressBytes &&\n          topicNormalised[2] ===\n            ENSContracts.registrarController.toLowerCase()) ||\n        (topicNormalised[1] === paymentNoAddressBytes &&\n          topicNormalised[2] === owner)\n      ) {\n        resolvedEventType.push({\n          type: EnsEventsEnum.MINT,\n          from: null,\n          to: ENSContracts.registrarController.toLowerCase(),\n          txHash: tx.transactionHash,\n          value: this.txValueToEther(tx.value),\n          date: tx.timestamp,\n        } as ENSEventModel);\n      } else if (topicNormalised[2] === paymentNoAddressBytes) {\n        resolvedEventType.push({\n          type: EnsEventsEnum.BURN,\n          from: topicNormalised[1],\n          to: null,\n          txHash: tx.transactionHash,\n          value: this.txValueToEther(tx.value),\n          date: tx.timestamp,\n        } as ENSEventModel);\n      } else if (\n        topicNormalised[1] !== ENSContracts.registrarController.toLowerCase() &&\n        topicNormalised[1] !== paymentNoAddressBytes &&\n        topicNormalised[2] !== ENSContracts.registrarController.toLowerCase() &&\n        topicNormalised[2] !== paymentNoAddressBytes &&\n        topicNormalised[1].length === 42 &&\n        topicNormalised[2].length === 42\n      ) {\n        resolvedEventType.push({\n          type: EnsEventsEnum.TRANSFER,\n          from: topicNormalised[1].toLowerCase(),\n          to: topicNormalised[2].toLowerCase(),\n          txHash: tx.transactionHash,\n          value: this.txValueToEther(tx.value),\n          date: tx.timestamp,\n        } as ENSEventModel);\n      }\n    }\n    const uniqueSet = new Set();\n    let filteredEvents = resolvedEventType;\n    if (resolvedEventType.map((re) => re.type).includes(EnsEventsEnum.SALE)) {\n      filteredEvents = resolvedEventType.filter((r) => {\n        if (r.type === EnsEventsEnum.SALE) {\n          return true;\n        }\n        return false;\n      });\n    }\n    return filteredEvents.filter((r) => {\n      const isDuplicate = uniqueSet.has(r.type + r.txHash);\n      uniqueSet.add(r.type + r.txHash);\n      if (isDuplicate === false) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  txValueToEther(value: string) {\n    return parseFloat(\n      ethers.utils.formatEther(ethers.BigNumber.from(value).toString())\n    ).toFixed(5);\n  }\n\n  getMarketBuyer(\n    market: SortableMarkets,\n    eventWholeData: any,\n    event: any,\n    tx: any\n  ) {\n    switch (market) {\n      case SortableMarkets.SEAPORT:\n        {\n          return event[2];\n        }\n        break;\n      case SortableMarkets.LOOKSRARE:\n        {\n          return tx.from;\n        }\n        break;\n      case SortableMarkets.RARIBLE:\n        {\n          return tx.from;\n        }\n        break;\n      case SortableMarkets.X2Y2:\n        {\n          return tx.from;\n        }\n        break;\n    }\n  }\n\n  getMarketSeller(\n    market: SortableMarkets,\n    eventWholeData: any,\n    event: any,\n    tx: any\n  ) {\n    switch (market) {\n      case SortableMarkets.SEAPORT:\n        {\n          return event[1];\n        }\n        break;\n      case SortableMarkets.LOOKSRARE:\n        {\n          return event[2];\n        }\n        break;\n      case SortableMarkets.RARIBLE:\n        {\n          return event[1];\n        }\n        break;\n      case SortableMarkets.X2Y2:\n        {\n          const data = eventWholeData.data.substring(2).match(/.{1,64}/g);\n          return ethers.BigNumber.from('0x' + data[2]).toHexString();\n        }\n        break;\n    }\n  }\n\n  getENSContract(provider) {\n    const contract = new Contract(\n      ENSContracts.registrar,\n      this.ensContractABI,\n      provider\n    );\n    return contract;\n  }\n\n  getENSRegistrarControllerContract(provider) {\n    const contract = new Contract(\n      ENSContracts.registrarController,\n      this.ensRegistrarControllerContractABI,\n      provider\n    );\n    return contract;\n  }\n\n  get ensRegistrarControllerContractABI() {\n    if (environment.test === true) {\n      return EnsRegistrarControllerTestnetABI;\n    }\n    return EnsRegistrarControllerABI;\n  }\n\n  get ensContractABI() {\n    if (environment.test === true) {\n      return EnsTestnetABI;\n    }\n    return EnsABI;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { generalConfigurations } from 'src/app/configurations';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegistrationServiceService {\n  constructor(protected snackBar: MatSnackBar) {}\n\n  countRegistrations() {\n    const rs = this.loadRegistrationsAndFeed();\n    return rs.length;\n  }\n\n  loadRegistrations() {\n    return localStorage.getItem('canvas-registrations');\n  }\n\n  loadRegistrationsAndFeed() {\n    const sRegistrations = this.loadRegistrations();\n    if (\n      sRegistrations !== null &&\n      sRegistrations !== 'null' &&\n      sRegistrations !== '' &&\n      sRegistrations !== '[]'\n    ) {\n      return JSON.parse(sRegistrations);\n    }\n    return [];\n  }\n\n  saveRegistrations(domainData: ENSDomainMetadataModel) {\n    if (\n      this.loadRegistrationsAndFeed().length >=\n      generalConfigurations.maxDomainsToRegister\n    ) {\n      this.snackBar.open(\n        'Only a maximum of ' +\n          generalConfigurations.maxDomainsToRegister +\n          ' domains can be registered.',\n        'close',\n        {\n          horizontalPosition: 'center',\n          verticalPosition: 'bottom',\n          duration: 15000,\n        }\n      );\n      return;\n    }\n    const registrationsRaw = this.loadRegistrationsAndFeed().reduce(\n      (accumulator, value) => {\n        return { ...accumulator, [value.labelName]: value };\n      },\n      {}\n    );\n    const bKeys = Object.keys(registrationsRaw);\n    const registrations = [...new Set(bKeys)].map((k) => registrationsRaw[k]);\n    registrations.push(domainData);\n    localStorage.setItem('canvas-registrations', JSON.stringify(registrations));\n    return registrations;\n  }\n\n  removeRegistration(\n    registrations: ENSDomainMetadataModel[],\n    domainName: string\n  ) {\n    const registrationsUpdated = [];\n    registrations.filter((d) => {\n      if (d.labelName !== domainName) {\n        registrationsUpdated.push(d);\n      }\n    });\n    localStorage.setItem(\n      'canvas-registrations',\n      JSON.stringify(registrationsUpdated)\n    );\n    return registrationsUpdated;\n  }\n\n  removeAllRegistrations() {\n    return localStorage.setItem('canvas-registrations', '');\n  }\n\n  isDomainOnRegistrationList(\n    registrations: ENSDomainMetadataModel[],\n    domainName: string\n  ) {\n    for (const d of registrations) {\n      if (d.labelName === domainName) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TranslationService } from './translation.service';\n\n@Pipe({\n  name: 'translate',\n})\nexport class TranslationPipe implements PipeTransform {\n  constructor(public translationService: TranslationService) {}\n  transform(value: any): any {\n    if (!value || value === undefined || value.length <= 0) {\n      return null;\n    }\n    const language = this.translationService.getLanguage();\n    const translations = this.translationService.getTranslation(language);\n    const keysSplit = value.split('.');\n    if (value.indexOf('.') <= -1 && value in translations.default) {\n      return translations.default[value];\n    }\n    let currentKey;\n    for (const key of keysSplit) {\n      if (!currentKey) {\n        if (key in translations.default === false) {\n          return value;\n        }\n        currentKey = translations.default[key];\n      } else {\n        if (key in currentKey === false) {\n          return value;\n        }\n        currentKey = currentKey[key];\n      }\n    }\n    return currentKey;\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { generalConfigurations, validTranslations } from \"../../configurations\";\nimport { ValidLangEnum } from \"../../models\";\n\ndeclare const navigator: any;\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TranslationService {\n  constructor() {}\n  getTranslation(lang: ValidLangEnum) {\n    if (\n      lang in validTranslations === false ||\n      validTranslations[lang] === undefined\n    ) {\n      return validTranslations.en;\n    }\n    return validTranslations[lang];\n  }\n  getLanguage() {\n    if (navigator.language) {\n      return navigator.language.split(\"-\")[0];\n    } else {\n      return generalConfigurations.defaultLanguage;\n    }\n  }\n  getLocale() {\n    return navigator.language.length <= 2 ? \"en-US\" : navigator.language;\n  }\n  getCacheableLanguagekeys(key: string) {\n    const translation = this.getTranslation(this.getLanguage());\n    return translation.default[key];\n  }\n  getText(key: string) {\n    const translation = this.getTranslation(this.getLanguage());\n    return translation.default[key];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { WalletService } from '../wallet';\nimport { UserFacadeService } from '../../store/facades';\nimport { Provider } from '@ethersproject/abstract-provider';\nimport { Observable } from 'rxjs';\nimport { request, gql } from 'graphql-request';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(\n    public userFacade: UserFacadeService,\n    public walletService: WalletService\n  ) {}\n\n  getUserDomains(walletAddress: string) {\n    const url = environment.networks[environment.defaultChain].ensGraphQLAPI;\n    return new Observable((observer) => {\n      const query = gql`\n        { \n          registrations(first: 1000, where: { registrant: \"${walletAddress}\" }) {\n            expiryDate\n            registrationDate\n            domain{\n              createdAt\n              labelName\n              labelhash\n              id\n              events{\n                id\n                blockNumber\n                transactionID\n              }\n            }\n          }\n        }\n      `;\n      request(url, query).then((data) => {\n        observer.next(data);\n        observer.complete();\n      });\n    });\n  }\n\n  getEthAddress(provider: Provider, ethName: string) {\n    return new Observable((observer) => {\n      (provider as any)\n        .resolveName(ethName)\n        .then((r) => {\n          observer.next(r);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getEthName(provider: Provider, walletAddress: string) {\n    return new Observable((observer) => {\n      (provider as any)\n        .lookupAddress(walletAddress)\n        .then((r) => {\n          observer.next(r);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getUserText(provider: Provider, ethName: string, text: string) {\n    return new Observable((observer) => {\n      (provider as any)\n        .getResolver(ethName)\n        .then((resolver) => {\n          return resolver.getText(text);\n        })\n        .then((r) => {\n          observer.next(r);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getUserContentHash(provider: Provider, ethName: string) {\n    return new Observable((observer) => {\n      (provider as any)\n        .getResolver(ethName)\n        .then((resolver) => {\n          return resolver.getContentHash();\n        })\n        .then((r) => {\n          let web2Link = 'https://';\n          if (r.indexOf('ipfs:') > -1) {\n            web2Link += 'ipfs.io/ipfs/' + r.replace('ipfs://', '');\n          } else if (r.indexOf('ipns:') > -1) {\n            web2Link += 'gateway.ipfs.io/ipns/' + r.replace('ipns://', '');\n          }\n          observer.next(web2Link);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { providers } from 'ethers';\nimport { environment } from '../../../environments/environment';\nimport { UserModel } from '../../models/states/user-interfaces';\nimport { MetamaskService } from '../metamask';\n\ndeclare const localStorage;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserSessionService {\n  constructor(public metamaskService: MetamaskService) {}\n\n  quitUserSession() {\n    localStorage.removeItem('canvas-user-session');\n    localStorage.removeItem('walletconnect');\n    localStorage.removeItem('WALLETCONNECT_DEEPLINK_CHOICE');\n  }\n\n  saveUserSession(userData: UserModel) {\n    localStorage.setItem('canvas-user-session', JSON.stringify(userData));\n  }\n\n  loadUserSession() {\n    return localStorage.getItem('canvas-user-session');\n  }\n\n  getUserSessionProvider(chainId: number) {\n    const newProvider = this.createAlchemyFrontProvider(chainId);\n    return newProvider;\n  }\n\n  getDefaultChainId() {\n    return environment.networks[environment.defaultChain].chainId;\n  }\n\n  createAlchemyFrontProvider(chain: number) {\n    return new providers.AlchemyWebSocketProvider(\n      chain,\n      environment.networks[environment.defaultChain].providerKey\n    );\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { PagesFacadeService, UserFacadeService } from '../../store/facades';\nimport { MiscUtilsService } from '../misc-utils';\nimport { UserRegistrationModel } from 'src/app/models/states/user-interfaces';\nimport { WalletTypesEnum } from 'src/app/models/states/wallet-interfaces';\nimport WalletConnect from '@walletconnect/client';\nimport QRCodeModal from '@walletconnect/qrcode-modal';\nimport { PagesEnum } from 'src/app/models/states/pages-interfaces';\nimport { UserStoreErrorsEnum } from 'src/app/models/error-enums';\nimport { generalConfigurations } from 'src/app/configurations';\n\nconst globalAny: any = global;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WalletConnectService {\n  constructor(\n    public miscUtils: MiscUtilsService,\n    public userFacadeService: UserFacadeService,\n    public pagesFacade: PagesFacadeService,\n    public userFacade: UserFacadeService,\n    protected ngZone: NgZone\n  ) {\n    const dateNow = new Date().getTime();\n    if (globalAny.walletConnect === undefined) {\n      const connector = new WalletConnect({\n        bridge: 'https://bridge.walletconnect.org',\n        qrcodeModal: QRCodeModal,\n        qrcodeModalOptions: {\n          mobileLinks: generalConfigurations.wallectConnectSupportedWallets,\n          desktopLinks: [],\n        },\n        clientMeta: generalConfigurations.appMeta,\n      });\n      connector.on('connect', (error, payload) => {\n        if (error) {\n          throw error;\n        }\n        const { accounts, chainId } = payload.params[0];\n        const currentChainId = globalAny.chainId;\n        if (currentChainId !== chainId) {\n          this.userFacadeService.removeUser();\n          const wc = globalAny.walletConnect as WalletConnect;\n          wc.killSession();\n          this.userFacade.setErrorState(UserStoreErrorsEnum.CONNECT_ERROR);\n          this.pagesFacade.setNetworkChainCode(parseInt(chainId, 16));\n          return;\n        }\n        this.connect(dateNow, accounts[0]);\n      });\n      connector.on('session_update', (error, payload) => {\n        if (error) {\n          throw error;\n        }\n        const { accounts, chainId } = payload.params[0];\n        const currentChainId = globalAny.chainId;\n        const currentAccount = globalAny.chainAccount;\n        if (\n          currentChainId !== chainId ||\n          currentAccount.walletAddress.toLowerCase() !==\n            accounts[0].toLowerCase()\n        ) {\n          this.userFacadeService.removeUser();\n          const wc = globalAny.walletConnect as WalletConnect;\n          wc.killSession();\n          this.pagesFacade.setNetworkChainCode(parseInt(chainId, 16));\n          this.userFacadeService.removeUser();\n          this.pagesFacade.gotoPageRoute('home', PagesEnum.HOME);\n          return;\n        }\n      });\n      connector.on('disconnect', (error, payload) => {\n        if (error) {\n          throw error;\n        }\n      });\n      globalAny.walletConnect = connector;\n    }\n  }\n\n  createSession() {\n    globalAny.walletConnect.createSession();\n  }\n\n  connect(time: number, account: string) {\n    this.userFacade.registerUser({\n      walletType: WalletTypesEnum.WALLET_CONNECT,\n      address: account,\n    } as UserRegistrationModel);\n  }\n\n  getChainId() {\n    return globalAny.chainId;\n  }\n\n  signPayment(payloadHash: any) {\n    return new Observable((observer) => {\n      globalAny.walletConnect\n        .sendTransaction(payloadHash)\n        .then((tx) => {\n          if (tx === null || tx.length <= 0 || tx === undefined) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          observer.next(tx);\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Wallet, utils } from 'ethers';\nimport { UserFacadeService } from '../../store/facades';\nimport { NonceTypesEnum } from '../../models/states/wallet-interfaces';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WalletService {\n  constructor(public userFacade: UserFacadeService, public http: HttpClient) {}\n\n  produceNonce(type: NonceTypesEnum = NonceTypesEnum.TOKEN): string {\n    const nonceLength = type === NonceTypesEnum.TOKEN ? 32 : 15;\n    const charLibrary =\n      '0123456789' +\n      (type === NonceTypesEnum.TOKEN\n        ? 'ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'\n        : '');\n    let nonceString = '';\n    for (let i = 0; i < nonceLength; i++) {\n      const rnum = Math.floor(Math.random() * charLibrary.length);\n      nonceString += charLibrary.substring(rnum, rnum + 1);\n    }\n    return nonceString;\n  }\n\n  checksumEtheruemAddress(address: string) {\n    try {\n      utils.getAddress(address);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n\n  validateWalletAddress(address: string) {\n    if (this.checksumEtheruemAddress(address) === false) {\n      return false;\n    }\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n      return false;\n    } else if (\n      /^(0x)?[0-9a-f]{40}$/.test(address) ||\n      /^(0x)?[0-9A-F]{40}$/.test(address)\n    ) {\n      return true;\n    } else {\n      return true;\n    }\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSBookmarkStoreErrorsEnum } from '../../models/error-enums';\nexport const AddOneENSBookmark = '[ENSBookmarkState] Add payment.';\nexport const UpdateENSBookmark = '[ENSBookmarkState] Update payment.';\nexport const UpsertOneENSBookmark = '[ENSBookmarkState] Upsert one payment.';\nexport const UpsertManyENSBookmark = '[ENSBookmarkState] Upsert many payment.';\nexport const GetOneENSBookmark = '[ENSBookmarkState] Get one payment.';\nexport const GetAllENSBookmark = '[ENSBookmarkState] Get all payment.';\nexport const RemoveOneENSBookmark = '[ENSBookmarkState] Remove one payment.';\nexport const RemoveManyENSBookmark = '[ENSBookmarkState] Remove many payment.';\nexport const RemoveAllENSBookmark = '[ENSBookmarkState] Remove all payment.';\nexport const SetENSBookmarkError = '[ENSBookmarkState] ENSBookmark error set.';\n\nexport class ENSBookmarkErrorSet implements Action {\n  readonly type = SetENSBookmarkError;\n  constructor(public payload: ENSBookmarkStoreErrorsEnum) {}\n}\n\nexport class ENSBookmarkAddOne implements Action {\n  readonly type = AddOneENSBookmark;\n  constructor(public payload: ENSDomainMetadataModel, public toSave = true) {}\n}\n\nexport class ENSBookmarkUpsertOne implements Action {\n  readonly type = UpsertOneENSBookmark;\n  constructor(public payload: ENSDomainMetadataModel, public toSave = true) {}\n}\n\nexport class ENSBookmarkUpsertMany implements Action {\n  readonly type = UpsertManyENSBookmark;\n  constructor(public payload: ENSDomainMetadataModel[], public toSave = true) {}\n}\n\nexport class ENSBookmarkGetOne implements Action {\n  readonly type = GetOneENSBookmark;\n  constructor(public payload: string) {}\n}\n\nexport class ENSBookmarkGetAll implements Action {\n  readonly type = GetAllENSBookmark;\n  constructor(public payload: string) {}\n}\n\nexport class ENSBookmarkRemoveOne implements Action {\n  readonly type = RemoveOneENSBookmark;\n  constructor(public payload: string, public toSave = true) {}\n}\n\nexport class ENSBookmarkRemoveMany implements Action {\n  readonly type = RemoveManyENSBookmark;\n  constructor(public payload: string[], public toSave = true) {}\n}\n\nexport class ENSBookmarkRemoveAll implements Action {\n  readonly type = RemoveAllENSBookmark;\n  constructor(public authenticationPin: string, public toSave = true) {}\n}\n\nexport class ENSBookmarkUpdate implements Action {\n  readonly type = UpdateENSBookmark;\n  constructor(public payload: ENSDomainMetadataModel, public toSave = true) {}\n}\n\nexport type ENSBookmarkActions =\n  | ENSBookmarkAddOne\n  | ENSBookmarkRemoveOne\n  | ENSBookmarkRemoveMany\n  | ENSBookmarkGetAll\n  | ENSBookmarkGetOne\n  | ENSBookmarkUpsertOne\n  | ENSBookmarkUpsertMany\n  | ENSBookmarkErrorSet\n  | ENSBookmarkRemoveAll\n  | ENSBookmarkUpdate;\n","import { Action } from '@ngrx/store';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSRegistrationStoreErrorsEnum } from '../../models/error-enums';\nexport const AddOneENSRegistration = '[ENSRegistrationState] Add payment.';\nexport const UpdateENSRegistration = '[ENSRegistrationState] Update payment.';\nexport const UpsertOneENSRegistration =\n  '[ENSRegistrationState] Upsert one payment.';\nexport const UpsertManyENSRegistration =\n  '[ENSRegistrationState] Upsert many payment.';\nexport const GetOneENSRegistration = '[ENSRegistrationState] Get one payment.';\nexport const GetAllENSRegistration = '[ENSRegistrationState] Get all payment.';\nexport const RemoveOneENSRegistration =\n  '[ENSRegistrationState] Remove one payment.';\nexport const RemoveManyENSRegistration =\n  '[ENSRegistrationState] Remove many payment.';\nexport const RemoveAllENSRegistration =\n  '[ENSRegistrationState] Remove all payment.';\nexport const SetENSRegistrationError =\n  '[ENSRegistrationState] ENSRegistration error set.';\n\nexport class ENSRegistrationErrorSet implements Action {\n  readonly type = SetENSRegistrationError;\n  constructor(public payload: ENSRegistrationStoreErrorsEnum) {}\n}\n\nexport class ENSRegistrationAddOne implements Action {\n  readonly type = AddOneENSRegistration;\n  constructor(public payload: ENSDomainMetadataModel, public toSave = true) {}\n}\n\nexport class ENSRegistrationUpsertOne implements Action {\n  readonly type = UpsertOneENSRegistration;\n  constructor(public payload: ENSDomainMetadataModel, public toSave = true) {}\n}\n\nexport class ENSRegistrationUpsertMany implements Action {\n  readonly type = UpsertManyENSRegistration;\n  constructor(public payload: ENSDomainMetadataModel[], public toSave = true) {}\n}\n\nexport class ENSRegistrationGetOne implements Action {\n  readonly type = GetOneENSRegistration;\n  constructor(public payload: string) {}\n}\n\nexport class ENSRegistrationGetAll implements Action {\n  readonly type = GetAllENSRegistration;\n  constructor(public payload: string) {}\n}\n\nexport class ENSRegistrationRemoveOne implements Action {\n  readonly type = RemoveOneENSRegistration;\n  constructor(public payload: string, public toSave = true) {}\n}\n\nexport class ENSRegistrationRemoveMany implements Action {\n  readonly type = RemoveManyENSRegistration;\n  constructor(public payload: string[], public toSave = true) {}\n}\n\nexport class ENSRegistrationRemoveAll implements Action {\n  readonly type = RemoveAllENSRegistration;\n  constructor() {}\n}\n\nexport class ENSRegistrationUpdate implements Action {\n  readonly type = UpdateENSRegistration;\n  constructor(public payload: ENSDomainMetadataModel, public toSave = true) {}\n}\n\nexport type ENSRegistrationActions =\n  | ENSRegistrationAddOne\n  | ENSRegistrationRemoveOne\n  | ENSRegistrationRemoveMany\n  | ENSRegistrationGetAll\n  | ENSRegistrationGetOne\n  | ENSRegistrationUpsertOne\n  | ENSRegistrationUpsertMany\n  | ENSRegistrationErrorSet\n  | ENSRegistrationRemoveAll\n  | ENSRegistrationUpdate;\n","import { Action } from \"@ngrx/store\";\nimport { NavigatorButtonsStateModel } from \"../../models/states/navigator-interfaces\";\n\nexport const SetNavigatorButtonsState =\n  \"[NavigatorButtonsState] New state set.\";\nexport const GetNavigatorButtonsState =\n  \"[NavigatorButtonsState] Latest state retrieved.\";\n\nexport class NavigatorButtonsStateSet implements Action {\n  readonly type = SetNavigatorButtonsState;\n  constructor(public payload: NavigatorButtonsStateModel) {}\n}\n\nexport class NavigatorButtonsStateGet implements Action {\n  readonly type = GetNavigatorButtonsState;\n  constructor() {}\n}\n\nexport type NavigatorButtonActions =\n  | NavigatorButtonsStateSet\n  | NavigatorButtonsStateGet;\n","import { Action } from \"@ngrx/store\";\nimport { NavigatorStateModel } from \"../../models/states/navigator-interfaces\";\n\nexport const SetNavigatorState = \"[NavigatorState] New state set.\";\nexport const SetNavigatorStateDisabledButtons =\n  \"[NavigatorState] Disabled buttons set.\";\nexport const GetNavigatorState = \"[NavigatorState] Latest state retrieved.\";\n\nexport class NavigatorStateSet implements Action {\n  readonly type = SetNavigatorState;\n  constructor(public payload: NavigatorStateModel) {}\n}\n\nexport class NavigatorStateGet implements Action {\n  readonly type = GetNavigatorState;\n  constructor() {}\n}\n\nexport type NavigatorActions = NavigatorStateSet | NavigatorStateGet;\n","import { MatDialogRef } from '@angular/material/dialog';\nimport { Action } from '@ngrx/store';\nimport { IpfsErrorsEnum } from 'src/app/models/error-enums';\nimport { IpfsStatesEnum } from 'src/app/models/ipfs';\nimport {\n  GotoPageRouteActionPayloadModel,\n  PagesStateModel,\n} from '../../models/states/pages-interfaces';\n\nexport const ShowLoadingProgressBarOnLoad = '[PagesState] Spinner dialog set.';\nexport const HideLoadingProgressBarOnLoadFinished =\n  '[PagesState] Spinner dialog unset.';\nexport const SetPagesCriticalError = '[PagesState] critical error set.';\nexport const SetPagesPageSlide = '[PagesState] New page slide set.';\nexport const SetPagesState = '[PagesState] New state set.';\nexport const SetPageIpfsErrors = '[PagesState] ipfs error state set.';\nexport const SetPageIpfsState = '[PagesState] ipfs state set.';\nexport const SetPageChainCode = '[PagesState] chain code set.';\nexport const SetPagesNewPageState = '[PagesState] New state set.';\nexport const SetPagesNetworkState = '[PagesState] New network state set.';\nexport const SetPagesVisibility = '[PagesState] visibility state set.';\nexport const SetPagesNetworkStateOffline =\n  '[PagesState] Offline network state procedure invoke.';\nexport const GetPagesState = '[PagesState] Latest state retrieved.';\nexport const GotoPageRoute = '[PagesState] Going to page route.';\n\nexport class PagesSetVisibility implements Action {\n  readonly type = SetPagesVisibility;\n  constructor(public payload: boolean) {}\n}\n\nexport class PagesSetCriticalError implements Action {\n  readonly type = SetPagesCriticalError;\n  constructor(public payload: boolean, public redirect = true) {}\n}\n\nexport class PagesSetIpfsError implements Action {\n  readonly type = SetPageIpfsErrors;\n  constructor(public payload: IpfsErrorsEnum) {}\n}\n\nexport class PagesSetIpfsState implements Action {\n  readonly type = SetPageIpfsState;\n  constructor(public payload: IpfsStatesEnum) {}\n}\n\nexport class PagesShowLoadingProgressBarOnLoad implements Action {\n  readonly type = ShowLoadingProgressBarOnLoad;\n  constructor() {}\n}\n\nexport class PagesHideLoadingProgressBarOnLoadFinished implements Action {\n  readonly type = HideLoadingProgressBarOnLoadFinished;\n  constructor() {}\n}\n\nexport class PagesSetChainCode implements Action {\n  readonly type = SetPageChainCode;\n  constructor(public payload: number, public firstTimeSet = false) {}\n}\n\nexport class PagesSetPageSlide implements Action {\n  readonly type = SetPagesPageSlide;\n  constructor(public payload: number) {}\n}\n\nexport class PagesStateSet implements Action {\n  readonly type = SetPagesState;\n  constructor(public payload: PagesStateModel) {}\n}\n\nexport class PagesNewPageStateSet implements Action {\n  readonly type = SetPagesNewPageState;\n  constructor(public payload: PagesStateModel) {}\n}\n\nexport class PagesNetworkStateSet implements Action {\n  readonly type = SetPagesNetworkState;\n  constructor(public payload: PagesStateModel) {}\n}\n\nexport class PagesNetworkOfflineStateInvoke implements Action {\n  readonly type = SetPagesNetworkStateOffline;\n  constructor() {}\n}\n\nexport class PagesStateGet implements Action {\n  readonly type = GetPagesState;\n  constructor() {}\n}\n\nexport class PageGotoRoute implements Action {\n  readonly type = GotoPageRoute;\n  constructor(public payload: GotoPageRouteActionPayloadModel) {}\n}\n\nexport type PagesActions =\n  | PagesSetChainCode\n  | PagesSetIpfsError\n  | PagesSetIpfsState\n  | PagesSetPageSlide\n  | PagesHideLoadingProgressBarOnLoadFinished\n  | PagesShowLoadingProgressBarOnLoad\n  | PagesStateSet\n  | PagesStateGet\n  | PagesNewPageStateSet\n  | PagesNetworkOfflineStateInvoke\n  | PageGotoRoute\n  | PagesNetworkStateSet\n  | PagesSetCriticalError;\n","import { Action } from '@ngrx/store';\nimport { PaymentStoreErrorsEnum } from '../../models/error-enums';\nimport { PaymentModel } from '../../models/states/payment-interfaces/payment.model';\nexport const PaymentCheckFulfilled =\n  '[PaymentState] Payment checking status if fulfilled.';\nexport const PaymentTriggerStatusChecking =\n  '[PaymentState] Payment checking status triggered.';\nexport const AddOnePayment = '[PaymentState] Add payment.';\nexport const UpdatePayment = '[PaymentState] Update payment.';\nexport const UpsertOnePayment = '[PaymentState] Upsert one payment.';\nexport const UpsertManyPayment = '[PaymentState] Upsert many payment.';\nexport const GetOnePayment = '[PaymentState] Get one payment.';\nexport const GetAllPayment = '[PaymentState] Get all payment.';\nexport const SetEthUSDRates = '[PaymentState] ETHUSD rate set.';\nexport const RemoveOnePayment = '[PaymentState] Remove one payment.';\nexport const RemoveManyPayment = '[PaymentState] Remove many payment.';\nexport const RemoveAllPayment = '[PaymentState] Remove all payment.';\nexport const ArchiveAllPayment = '[PaymentState] Archive all payment.';\nexport const SetPaymentError = '[PaymentState] Payment error set.';\n\nexport class PaymentArchiveAll implements Action {\n  readonly type = ArchiveAllPayment;\n  constructor() {}\n}\n\nexport class PaymentETHUSDRatesSet implements Action {\n  readonly type = SetEthUSDRates;\n  constructor(public payload: string) {}\n}\n\nexport class PaymentErrorSet implements Action {\n  readonly type = SetPaymentError;\n  constructor(public payload: PaymentStoreErrorsEnum) {}\n}\n\nexport class PaymentAddOne implements Action {\n  readonly type = AddOnePayment;\n  constructor(public payload: PaymentModel) {}\n}\n\nexport class PaymentUpsertOne implements Action {\n  readonly type = UpsertOnePayment;\n  constructor(public payload: PaymentModel) {}\n}\n\nexport class PaymentUpsertMany implements Action {\n  readonly type = UpsertManyPayment;\n  constructor(public payload: PaymentModel[]) {}\n}\n\nexport class PaymentGetOne implements Action {\n  readonly type = GetOnePayment;\n  constructor(public payload: string) {}\n}\n\nexport class PaymentGetAll implements Action {\n  readonly type = GetAllPayment;\n  constructor(public payload: string) {}\n}\n\nexport class PaymentRemoveOne implements Action {\n  readonly type = RemoveOnePayment;\n  constructor(public payload: string) {}\n}\n\nexport class PaymentRemoveMany implements Action {\n  readonly type = RemoveManyPayment;\n  constructor(public payload: string[]) {}\n}\n\nexport class PaymentRemoveAll implements Action {\n  readonly type = RemoveAllPayment;\n  constructor(public authenticationPin: string) {}\n}\n\nexport class CheckPaymentFulfilled implements Action {\n  readonly type = PaymentCheckFulfilled;\n  constructor(public payload: PaymentModel) {}\n}\n\nexport class PaymentUpdate implements Action {\n  readonly type = UpdatePayment;\n  constructor(public payload: PaymentModel) {}\n}\n\nexport type PaymentActions =\n  | PaymentAddOne\n  | PaymentRemoveOne\n  | PaymentRemoveMany\n  | PaymentGetAll\n  | PaymentGetOne\n  | PaymentUpsertOne\n  | PaymentUpsertMany\n  | PaymentErrorSet\n  | PaymentRemoveAll\n  | PaymentETHUSDRatesSet\n  | CheckPaymentFulfilled\n  | PaymentUpdate\n  | PaymentArchiveAll;\n","import { Action } from \"@ngrx/store\";\nimport { UserStoreErrorsEnum } from \"../../models/error-enums\";\nimport {\n  UserModel,\n  UserRegistrationModel,\n} from \"../../models/states/user-interfaces\";\n\nexport const SetUserState = \"[UserState] New state set.\";\nexport const SetUserError = \"[UserState] An error has occured.\";\nexport const GetUserState = \"[UserState] Latest state retrieved.\";\nexport const RemoveUserError = \"[UserState] Error removed.\";\nexport const RemoveUserState =\n  \"[UserState] Latest state replaced (with Empty).\";\nexport const RemoveUser = \"[UserState] Latest user replaced (with Empty).\";\nexport const AddUser = \"[UserState] New user added.\";\nexport const UpdateUser = \"[UserState] User updated added.\";\nexport const RegisterUser = \"[UserState] New user registration.\";\n\nexport class UserErrorSet implements Action {\n  readonly type = SetUserError;\n  constructor(public payload: UserStoreErrorsEnum) {}\n}\n\nexport class UserUpdate implements Action {\n  readonly type = UpdateUser;\n  constructor(public payload: UserModel) {}\n}\n\nexport class UserStateSet implements Action {\n  readonly type = SetUserState;\n  constructor(public payload: UserModel) {}\n}\n\nexport class UserStateGet implements Action {\n  readonly type = GetUserState;\n  constructor(public payload: number) {}\n}\n\nexport class UserStateRemove implements Action {\n  readonly type = RemoveUserState;\n  constructor() {}\n}\n\nexport class UserErrorRemove implements Action {\n  readonly type = RemoveUserError;\n  constructor() {}\n}\n\nexport class UserRemove implements Action {\n  readonly type = RemoveUser;\n  constructor() {}\n}\n\nexport class UserRegister implements Action {\n  readonly type = RegisterUser;\n  constructor(public payload: UserRegistrationModel) {}\n}\n\nexport class UserAdd implements Action {\n  readonly type = AddUser;\n  constructor(public payload: UserModel) {}\n}\n\nexport type UserActions =\n  | UserStateSet\n  | UserUpdate\n  | UserErrorSet\n  | UserStateGet\n  | UserStateRemove\n  | UserErrorRemove\n  | UserRemove\n  | UserRegister\n  | UserAdd;\n","import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { getCurrentUserState, getCurrentUser } from '../selectors';\nimport {\n  UserStateSet,\n  UserStateRemove,\n  UserAdd,\n  UserErrorRemove,\n  UserErrorSet,\n  UserUpdate,\n  UserRemove,\n  UserRegister,\n} from '../actions';\nimport {\n  UserModel,\n  UserRegistrationModel,\n  UserStateModel,\n} from '../../models/states/user-interfaces';\nimport { UserStoreErrorsEnum } from '../../models/error-enums';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserFacadeService {\n  userState$: Observable<UserStateModel>;\n  user$: Observable<UserModel>;\n\n  constructor(public store: Store<UserStateModel>) {\n    this.userState$ = this.store.pipe(select(getCurrentUserState));\n    this.user$ = this.store.pipe(select(getCurrentUser));\n  }\n\n  registerUser(userData: UserRegistrationModel) {\n    this.store.dispatch(new UserRegister(userData));\n  }\n\n  newUserState(userState: UserModel) {\n    this.store.dispatch(new UserStateSet(userState));\n  }\n\n  removeUserState() {\n    this.store.dispatch(new UserStateRemove());\n  }\n\n  removeUser() {\n    this.store.dispatch(new UserRemove());\n  }\n\n  removeUserStateError() {\n    this.store.dispatch(new UserErrorRemove());\n  }\n\n  setErrorState(error: UserStoreErrorsEnum) {\n    this.store.dispatch(new UserErrorSet(error));\n  }\n\n  addUser(userAddData: UserModel) {\n    this.store.dispatch(new UserAdd(userAddData));\n  }\n\n  updateUser(userData: UserModel) {\n    this.store.dispatch(new UserUpdate(userData));\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport {\n  PaymentModel,\n  PaymentStateModel,\n} from '../../models/states/payment-interfaces';\nimport {\n  getEthUsdPrice,\n  getPayments,\n  getPaymentState,\n  getPaymentStateError,\n  getPaymentStateLoading,\n  getPendingPayments,\n  selectPayment,\n} from '../selectors';\nimport {\n  PaymentErrorSet,\n  PaymentUpdate,\n  PaymentUpsertOne,\n  PaymentRemoveOne,\n  PaymentRemoveMany,\n  PaymentAddOne,\n  ArchiveAllPayment,\n  PaymentArchiveAll,\n} from '../actions';\nimport { PaymentStoreErrorsEnum } from '../../models/error-enums';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentFacadeService {\n  paymentState$: Observable<PaymentStateModel>;\n  pendingPayments$: Observable<PaymentModel[]>;\n  approvablePayments$: Observable<PaymentModel[]>;\n  paymentsStored$: Observable<PaymentModel[]>;\n  paymentsStoreError$: Observable<PaymentStoreErrorsEnum>;\n  paymentsStoreLoading$: Observable<boolean>;\n  ethUsdPrice$: Observable<string>;\n\n  constructor(protected store: Store<PaymentModel>) {\n    this.paymentState$ = this.store.pipe(select(getPaymentState));\n    this.pendingPayments$ = this.store.pipe(select(getPendingPayments));\n    this.paymentsStoreError$ = this.store.pipe(select(getPaymentStateError));\n    this.paymentsStoreLoading$ = this.store.pipe(\n      select(getPaymentStateLoading)\n    );\n    this.ethUsdPrice$ = this.store.pipe(select(getEthUsdPrice));\n  }\n\n  createPayment(payment: PaymentModel) {\n    this.store.dispatch(new PaymentAddOne(payment));\n  }\n\n  removePayment(payment: PaymentModel) {\n    this.store.dispatch(new PaymentRemoveOne(payment.paymentSerial));\n  }\n\n  removePayments(payments: PaymentModel[]) {\n    this.store.dispatch(\n      new PaymentRemoveMany(payments.map((n) => n.paymentSerial))\n    );\n  }\n\n  archiveAllPayment() {\n    this.store.dispatch(new PaymentArchiveAll());\n  }\n\n  upsertPayment(payment: PaymentModel) {\n    this.store.dispatch(new PaymentUpsertOne(payment));\n  }\n\n  updatePayment(payment: PaymentModel) {\n    this.store.dispatch(new PaymentUpdate(payment));\n  }\n\n  getPayment(paymentId: number) {\n    return this.store.pipe(select(selectPayment(paymentId)));\n  }\n\n  getPayments() {\n    return this.store.pipe(select(getPayments));\n  }\n\n  removePaymentStateError() {\n    this.store.dispatch(new PaymentErrorSet(undefined));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSBookmarkStateModel } from 'src/app/models/states/ens-bookmark-interfaces';\nimport {\n  ENSBookmarkAddOne,\n  ENSBookmarkErrorSet,\n  ENSBookmarkRemoveMany,\n  ENSBookmarkRemoveOne,\n  ENSBookmarkUpdate,\n  ENSBookmarkUpsertOne,\n} from '../actions';\nimport {\n  getENSBookmarks,\n  getENSBookmarkState,\n  selectENSBookmark,\n} from '../selectors';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ENSBookmarkFacadeService {\n  getENSBookmarkState$: Observable<ENSBookmarkStateModel>;\n\n  constructor(public store: Store<ENSBookmarkStateModel>) {\n    this.getENSBookmarkState$ = this.store.pipe(select(getENSBookmarkState));\n  }\n  addBookmark(bookmark: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSBookmarkAddOne(bookmark));\n  }\n\n  removeBookmark(bookmark: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSBookmarkRemoveOne(bookmark.id));\n  }\n\n  removeBookmarks(bookmark: ENSDomainMetadataModel[]) {\n    this.store.dispatch(new ENSBookmarkRemoveMany(bookmark.map((n) => n.id)));\n  }\n\n  upsertBookmark(bookmark: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSBookmarkUpsertOne(bookmark));\n  }\n\n  updateBookmark(bookmark: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSBookmarkUpdate(bookmark));\n  }\n\n  getBookmark(bookmarkId: number) {\n    return this.store.pipe(select(selectENSBookmark(bookmarkId)));\n  }\n\n  getBookmarks() {\n    return this.store.pipe(select(getENSBookmarks));\n  }\n\n  removeBookmarkStateError() {\n    this.store.dispatch(new ENSBookmarkErrorSet(undefined));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSRegistrationStateModel } from 'src/app/models/states/ens-registration-interfaces';\nimport {\n  ENSRegistrationAddOne,\n  ENSRegistrationErrorSet,\n  ENSRegistrationRemoveAll,\n  ENSRegistrationRemoveMany,\n  ENSRegistrationRemoveOne,\n  ENSRegistrationUpdate,\n  ENSRegistrationUpsertOne,\n} from '../actions';\nimport {\n  getENSRegistrations,\n  getENSRegistrationState,\n  selectENSRegistration,\n} from '../selectors';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ENSRegistrationFacadeService {\n  getENSRegistrationState$: Observable<ENSRegistrationStateModel>;\n\n  constructor(public store: Store<ENSRegistrationStateModel>) {\n    this.getENSRegistrationState$ = this.store.pipe(\n      select(getENSRegistrationState)\n    );\n  }\n\n  addRegistration(registration: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSRegistrationAddOne(registration));\n  }\n\n  removeRegistration(registration: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSRegistrationRemoveOne(registration.id));\n  }\n\n  removeRegistrations(registration: ENSDomainMetadataModel[]) {\n    this.store.dispatch(\n      new ENSRegistrationRemoveMany(registration.map((n) => n.id))\n    );\n  }\n\n  removeAllRegistrations() {\n    this.store.dispatch(new ENSRegistrationRemoveAll());\n  }\n\n  upsertRegistration(registration: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSRegistrationUpsertOne(registration));\n  }\n\n  updateRegistration(registration: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSRegistrationUpdate(registration));\n  }\n\n  getRegistration(registrationId: number) {\n    return this.store.pipe(select(selectENSRegistration(registrationId)));\n  }\n\n  getRegistrations() {\n    return this.store.pipe(select(getENSRegistrations));\n  }\n\n  removeRegistrationStateError() {\n    this.store.dispatch(new ENSRegistrationErrorSet(undefined));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { NavigatorButtonsStateModel } from '../../models/states/navigator-interfaces';\nimport { NavigatorButtonsStateSet } from '../actions';\nimport { initialNavigatorButtonsState } from '../reducers';\nimport { getCurrentNavigatorButtonsState } from '../selectors';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigatorButtonsFacadeService {\n  disabledButtonnavigatorState$: Observable<NavigatorButtonsStateModel>;\n\n  constructor(public store: Store<NavigatorButtonsStateModel>) {\n    this.disabledButtonnavigatorState$ = this.store.pipe(\n      select(getCurrentNavigatorButtonsState)\n    );\n  }\n\n  newNavigatorButtonsState(navigatorState: NavigatorButtonsStateModel) {\n    setTimeout(() => {\n      this.store.dispatch(new NavigatorButtonsStateSet(navigatorState));\n    }, 100);\n  }\n\n  resetNavigatorButtonState() {\n    setTimeout(() => {\n      this.store.dispatch(\n        new NavigatorButtonsStateSet(initialNavigatorButtonsState)\n      );\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { NavigatorStateModel } from '../../models/states/navigator-interfaces';\nimport { NavigatorStateSet } from '../actions';\nimport { initialNavigatorState } from '../reducers';\nimport { getCurrentNavigatorState } from '../selectors';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigatorFacadeService {\n  navigatorState$: Observable<NavigatorStateModel>;\n\n  constructor(public store: Store<NavigatorStateModel>) {\n    this.navigatorState$ = this.store.pipe(select(getCurrentNavigatorState));\n  }\n\n  newNavigatorState(navigatorState: NavigatorStateModel) {\n    setTimeout(() => {\n      this.store.dispatch(new NavigatorStateSet(navigatorState));\n    });\n  }\n\n  resetNavigatorState() {\n    setTimeout(() => {\n      this.store.dispatch(new NavigatorStateSet(initialNavigatorState));\n    });\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { Injectable, NgZone } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { NavigatorFacadeService } from './navigator.facades';\nimport { NavigatorButtonsFacadeService } from './navigator-buttons.facades';\nimport {\n  getCriticalErrorState,\n  getCurrentErrorCode,\n  getCurrentPageLoadState,\n  getCurrentPagesState,\n  getCurrentPageVisibility,\n  getIpfsError,\n  getIpfsState,\n} from '../selectors';\nimport {\n  PageGotoRoute,\n  PagesNetworkOfflineStateInvoke,\n  PagesNetworkStateSet,\n  PagesNewPageStateSet,\n  PagesShowLoadingProgressBarOnLoad,\n  PagesHideLoadingProgressBarOnLoadFinished,\n  PagesSetPageSlide,\n  PagesSetChainCode,\n  PagesSetIpfsError,\n  PagesSetIpfsState,\n  PagesSetCriticalError,\n} from '../actions';\nimport {\n  GotoPageRouteActionPayloadModel,\n  PagesEnum,\n  PagesStateModel,\n} from '../../models/states/pages-interfaces';\nimport { MatDialog } from '@angular/material/dialog';\nimport { environment } from '../../../environments/environment';\nimport { IpfsErrorsEnum } from 'src/app/models/error-enums';\nimport { IpfsStatesEnum } from 'src/app/models/ipfs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PagesFacadeService {\n  pagesState$: Observable<PagesStateModel>;\n  pagesIpfsState$: Observable<IpfsStatesEnum>;\n  pagesIpfsError$: Observable<IpfsErrorsEnum>;\n  pageErrorCode$: Observable<string>;\n  pageLoadingState$: Observable<boolean>;\n  pageCritiaclError$: Observable<boolean>;\n  pageVisibility$: Observable<boolean>;\n\n  constructor(\n    public router: Router,\n    public store: Store<PagesStateModel>,\n    public navigatorFacade: NavigatorFacadeService,\n    public navigatorButtonFacade: NavigatorButtonsFacadeService,\n    public dialog: MatDialog,\n    public ngZone: NgZone\n  ) {\n    this.pagesState$ = this.store.pipe(select(getCurrentPagesState));\n    this.pageErrorCode$ = this.store.pipe(select(getCurrentErrorCode));\n    this.pagesIpfsState$ = this.store.pipe(select(getIpfsState));\n    this.pagesIpfsError$ = this.store.pipe(select(getIpfsError));\n    this.pageLoadingState$ = this.store.pipe(select(getCurrentPageLoadState));\n    this.pageCritiaclError$ = this.store.pipe(select(getCriticalErrorState));\n    this.pageVisibility$ = this.store.pipe(select(getCurrentPageVisibility));\n  }\n\n  showLoadingProgressBar() {\n    this.store.dispatch(new PagesShowLoadingProgressBarOnLoad());\n  }\n\n  setPageCriticalError(errorOccured: boolean, redirect = true) {\n    this.store.dispatch(new PagesSetCriticalError(errorOccured, redirect));\n  }\n\n  setIpfsError(error: IpfsErrorsEnum) {\n    this.store.dispatch(new PagesSetIpfsError(error));\n  }\n\n  setIpfsState(state: IpfsStatesEnum) {\n    this.store.dispatch(new PagesSetIpfsState(state));\n  }\n\n  hideLoadingProgressBar() {\n    this.store.dispatch(new PagesHideLoadingProgressBarOnLoadFinished());\n  }\n\n  newPagesState(pagesState: PagesStateModel) {\n    this.store.dispatch(new PagesNewPageStateSet(pagesState));\n    this.navigatorFacade.resetNavigatorState();\n  }\n\n  newNetworkState(networkState: PagesStateModel) {\n    this.store.dispatch(new PagesNetworkStateSet(networkState));\n  }\n\n  setNetworkChainCode(chainCode: number, firstTimeSet = false) {\n    this.store.dispatch(new PagesSetChainCode(chainCode, firstTimeSet));\n  }\n\n  setChainCodeByNetworkName(networkName: string, firstTimeSet = false) {\n    const networkData = environment.networks[networkName];\n    const chainCode = networkData.chainId;\n    this.store.dispatch(new PagesSetChainCode(chainCode, firstTimeSet));\n  }\n\n  triggerNetworkOfflineDialog() {\n    this.store.dispatch(new PagesNetworkOfflineStateInvoke());\n  }\n\n  setPageSlide(pageSlide: number) {\n    this.store.dispatch(new PagesSetPageSlide(pageSlide));\n  }\n\n  gotoPageRoute(pageRoute: string, toPageId: PagesEnum) {\n    this.store.dispatch(\n      new PageGotoRoute({\n        route: pageRoute,\n        pageId: toPageId,\n      } as GotoPageRouteActionPayloadModel)\n    );\n    this.navigatorFacade.resetNavigatorState();\n    this.navigatorButtonFacade.resetNavigatorButtonState();\n  }\n}\n","import { NavigatorButtonsStateModel } from \"../../models/states/navigator-interfaces\";\nimport { GetNavigatorButtonsState, SetNavigatorButtonsState } from \"../actions\";\n\nexport const initialNavigatorButtonsState: NavigatorButtonsStateModel = {\n  disabledButtons: undefined,\n};\n\nexport function NavigatorButtonsReducers(\n  state: NavigatorButtonsStateModel = initialNavigatorButtonsState,\n  action: any\n) {\n  switch (action.type) {\n    case SetNavigatorButtonsState: {\n      return action.payload;\n    }\n\n    case GetNavigatorButtonsState: {\n      return state;\n    }\n\n    default:\n      return state;\n  }\n}\n","import { NavigatorStateModel } from \"../../models/states/navigator-interfaces\";\nimport { GetNavigatorState, SetNavigatorState } from \"../actions\";\n\nexport const initialNavigatorState: NavigatorStateModel = {\n  navigatorActiveButtonId: undefined,\n  navigatorData: undefined,\n};\n\nexport function NavigatorReducers(\n  state: NavigatorStateModel = initialNavigatorState,\n  action: any\n) {\n  switch (action.type) {\n    case SetNavigatorState: {\n      return action.payload;\n    }\n\n    case GetNavigatorState: {\n      return state;\n    }\n\n    default:\n      return state;\n  }\n}\n","export enum IpfsStatesEnum {\n  IPFS_READY = 'IPFS.READY',\n  IPFS_INITIALISING = 'IPFS.INITIALISING',\n  IPFS_FINDING = 'IPFS.FINDING_PEERS',\n  IPFS_FAILED = 'IPFS.FAILED',\n  IPFS_PUBLISHING = 'IPFS.PUBLISHING',\n}\n","import { IpfsStatesEnum } from 'src/app/models/ipfs';\nimport { generalConfigurations } from '../../configurations';\nimport { PagesStateModel } from '../../models/states/pages-interfaces';\nimport {\n  GetPagesState,\n  GotoPageRoute,\n  HideLoadingProgressBarOnLoadFinished,\n  SetPageChainCode,\n  SetPageIpfsErrors,\n  SetPageIpfsState,\n  SetPagesCriticalError,\n  SetPagesNewPageState,\n  SetPagesPageSlide,\n  SetPagesState,\n  SetPagesVisibility,\n  ShowLoadingProgressBarOnLoad,\n} from '../actions';\n\nconst initialPagesState: PagesStateModel = {\n  pageVisibility: true,\n  criticalErrorOccured: false,\n  currentPageId: generalConfigurations.defaultPage,\n  currentPageSlide: 0,\n  errorCode: undefined,\n  ipfsError: undefined,\n  ipfsReady: IpfsStatesEnum.IPFS_INITIALISING,\n  networkStatus: undefined,\n  networkChainCode: undefined,\n  isPageLoading: false,\n};\n\nexport function PagesReducers(\n  state: PagesStateModel = initialPagesState,\n  action: any\n) {\n  switch (action.type) {\n    case SetPagesState: {\n      const newState = {\n        ...state,\n        currentPageId:\n          'currentPageId' in action.payload\n            ? action.payload.currentPageId\n            : state.currentPageId,\n        networkStatus:\n          'networkStatus' in action.payload\n            ? action.payload.networkStatus\n            : state.networkStatus,\n        networkChainCode:\n          'networkChainCode' in action.payload\n            ? action.payload.networkChainCode\n            : state.networkChainCode,\n        currentPageSlide: state.currentPageSlide,\n        errorCode:\n          'errorCode' in action.payload ? action.payload.errorCode : undefined,\n      };\n      return newState;\n    }\n\n    case SetPagesVisibility: {\n      const newState = {\n        ...state,\n        pageVisibility: action.payload,\n      };\n      return newState;\n    }\n\n    case SetPagesCriticalError: {\n      const newState = {\n        ...state,\n        criticalErrorOccured: action.payload,\n      };\n      return newState;\n    }\n\n    case SetPageIpfsErrors: {\n      const newState = {\n        ...state,\n        ipfsError: action.payload,\n        ipfsReady: IpfsStatesEnum.IPFS_FAILED,\n      };\n      return newState;\n    }\n\n    case SetPageIpfsState: {\n      const newState = {\n        ...state,\n        ipfsReady: action.payload,\n      };\n      return newState;\n    }\n\n    case SetPagesPageSlide: {\n      const newState = {\n        ...state,\n        currentPageSlide: action.payload,\n      };\n      return newState;\n    }\n\n    case SetPagesNewPageState: {\n      const newState = {\n        ...state,\n        pageId: action.payload.currentPageId,\n        currentPageSlide: state.currentPageSlide,\n      };\n      return newState;\n    }\n\n    case SetPagesPageSlide: {\n      const newState = {\n        ...state,\n        currentPageSlide: action.payload,\n      };\n      return newState;\n    }\n\n    case SetPageChainCode: {\n      const newState = {\n        ...state,\n        networkChainCode: action.payload,\n      };\n      return newState;\n    }\n\n    case ShowLoadingProgressBarOnLoad: {\n      const newState = {\n        ...state,\n        isPageLoading: true,\n      };\n      return newState;\n    }\n\n    case HideLoadingProgressBarOnLoadFinished: {\n      const newState = {\n        ...state,\n        isPageLoading: false,\n      };\n      return newState;\n    }\n\n    case GetPagesState: {\n      return state;\n    }\n\n    case GotoPageRoute: {\n      return {\n        ...state,\n        currentPageId: action.payload.pageId,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { UserModel, UserStateModel } from \"../../models/states/user-interfaces\";\nimport {\n  AddUser,\n  GetUserState,\n  RegisterUser,\n  RemoveUser,\n  RemoveUserError,\n  RemoveUserState,\n  SetUserError,\n  SetUserState,\n  UpdateUser,\n} from \"../actions\";\n\nconst initialUserState: UserStateModel = {\n  error: undefined,\n  loading: false,\n  success: undefined,\n  user: {} as UserModel,\n};\n\nexport function UserReducers(\n  state: UserStateModel = initialUserState,\n  action: any\n) {\n  switch (action.type) {\n    case SetUserError: {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    }\n\n    case SetUserState: {\n      return {\n        ...state,\n        user: action.payload,\n        loading: false,\n      };\n    }\n\n    case AddUser: {\n      return {\n        ...state,\n        user: action.payload,\n        loading: false,\n      };\n    }\n\n    case UpdateUser: {\n      return {\n        ...state,\n        user: action.payload,\n        loading: false,\n      };\n    }\n\n    case GetUserState: {\n      const newState = {\n        ...state,\n      };\n      return newState;\n    }\n\n    case RemoveUserError: {\n      return {\n        ...state,\n        loading: false,\n        error: undefined,\n      };\n    }\n\n    case RegisterUser: {\n      return {\n        ...state,\n        loading: true,\n        error: undefined,\n      };\n    }\n\n    case RemoveUser: {\n      return {\n        ...state,\n        user: {},\n      };\n    }\n\n    case RemoveUserState: {\n      return initialUserState;\n    }\n\n    default:\n      return state;\n  }\n}\n","import { EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { generalConfigurations } from '../../configurations';\nimport {\n  PaymentModel,\n  PaymentStateModel,\n} from '../../models/states/payment-interfaces';\nimport {\n  UpsertOnePayment,\n  UpsertManyPayment,\n  RemoveOnePayment,\n  RemoveManyPayment,\n  RemoveAllPayment,\n  SetPaymentError,\n  UpdatePayment,\n  AddOnePayment,\n  SetEthUSDRates,\n  ArchiveAllPayment,\n} from '../actions';\n\nexport function selectPaymentId(payment: PaymentModel): string {\n  return payment.id;\n}\n\nexport const adapter: EntityAdapter<PaymentModel> =\n  createEntityAdapter<PaymentModel>({\n    selectId: selectPaymentId,\n  });\n\nexport const initialPaymentState: PaymentStateModel = adapter.getInitialState({\n  error: undefined,\n  loading: false,\n  ethUsdPrice: '0.00',\n});\n\nexport function PaymentReducers(\n  state: PaymentStateModel = initialPaymentState,\n  action: any\n) {\n  switch (action.type) {\n    case UpsertOnePayment:\n    case UpdatePayment: {\n      const stateChange = adapter.upsertOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case SetEthUSDRates: {\n      return {\n        ...state,\n        ethUsdPrice: action.payload,\n      };\n    }\n\n    case AddOnePayment: {\n      const stateChange = adapter.addOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: true,\n      };\n    }\n\n    case UpsertManyPayment: {\n      const stateChange = adapter.upsertMany(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveOnePayment: {\n      const stateChange = adapter.removeOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveManyPayment: {\n      const stateChange = adapter.removeMany(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveAllPayment: {\n      const stateChange = adapter.removeAll(state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case ArchiveAllPayment: {\n      const payments = state.entities;\n      const updatedPayments = [];\n      for (const p of Object.keys(payments)) {\n        updatedPayments.push({ ...payments[p], archived: true });\n      }\n      const stateChange = adapter.upsertMany(updatedPayments, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case SetPaymentError: {\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n    }\n\n    case UpdatePayment: {\n      return {\n        ...state,\n        error: undefined,\n        loading: true,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSRegistrationStateModel } from '../../models/states/ens-registration-interfaces';\nimport {\n  UpsertOneENSRegistration,\n  UpsertManyENSRegistration,\n  RemoveOneENSRegistration,\n  RemoveManyENSRegistration,\n  RemoveAllENSRegistration,\n  SetENSRegistrationError,\n  UpdateENSRegistration,\n  AddOneENSRegistration,\n} from '../actions';\n\nexport function selectENSRegistrationId(\n  registration: ENSDomainMetadataModel\n): string {\n  return registration.id;\n}\n\nexport const ensRegistrationAdapter: EntityAdapter<ENSDomainMetadataModel> =\n  createEntityAdapter<ENSDomainMetadataModel>({\n    selectId: selectENSRegistrationId,\n  });\n\nexport const initialENSRegistrationState: ENSRegistrationStateModel =\n  ensRegistrationAdapter.getInitialState({\n    error: undefined,\n    loading: false,\n  });\n\nexport function ENSRegistrationReducers(\n  state: ENSRegistrationStateModel = initialENSRegistrationState,\n  action: any\n) {\n  switch (action.type) {\n    case UpsertOneENSRegistration:\n    case UpdateENSRegistration: {\n      const stateChange = ensRegistrationAdapter.upsertOne(\n        action.payload,\n        state\n      );\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case AddOneENSRegistration: {\n      const stateChange = ensRegistrationAdapter.addOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: true,\n      };\n    }\n\n    case UpsertManyENSRegistration: {\n      const stateChange = ensRegistrationAdapter.upsertMany(\n        action.payload,\n        state\n      );\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveOneENSRegistration: {\n      const stateChange = ensRegistrationAdapter.removeOne(\n        action.payload,\n        state\n      );\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveManyENSRegistration: {\n      const stateChange = ensRegistrationAdapter.removeMany(\n        action.payload,\n        state\n      );\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveAllENSRegistration: {\n      const stateChange = ensRegistrationAdapter.removeAll(state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case SetENSRegistrationError: {\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n    }\n\n    case UpdateENSRegistration: {\n      return {\n        ...state,\n        error: undefined,\n        loading: true,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSBookmarkStateModel } from '../../models/states/ens-bookmark-interfaces';\nimport {\n  UpsertOneENSBookmark,\n  UpsertManyENSBookmark,\n  RemoveOneENSBookmark,\n  RemoveManyENSBookmark,\n  RemoveAllENSBookmark,\n  SetENSBookmarkError,\n  UpdateENSBookmark,\n  AddOneENSBookmark,\n} from '../actions';\n\nexport function selectENSBookmarkId(bookmark: ENSDomainMetadataModel): string {\n  return bookmark.id;\n}\n\nexport const ensBookmarkAdapter: EntityAdapter<ENSDomainMetadataModel> =\n  createEntityAdapter<ENSDomainMetadataModel>({\n    selectId: selectENSBookmarkId,\n  });\n\nexport const initialENSBookmarkState: ENSBookmarkStateModel =\n  ensBookmarkAdapter.getInitialState({\n    error: undefined,\n    loading: false,\n  });\n\nexport function ENSBookmarkReducers(\n  state: ENSBookmarkStateModel = initialENSBookmarkState,\n  action: any\n) {\n  switch (action.type) {\n    case UpsertOneENSBookmark:\n    case UpdateENSBookmark: {\n      const stateChange = ensBookmarkAdapter.upsertOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case AddOneENSBookmark: {\n      const stateChange = ensBookmarkAdapter.addOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: true,\n      };\n    }\n\n    case UpsertManyENSBookmark: {\n      const stateChange = ensBookmarkAdapter.upsertMany(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveOneENSBookmark: {\n      const stateChange = ensBookmarkAdapter.removeOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveManyENSBookmark: {\n      const stateChange = ensBookmarkAdapter.removeMany(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveAllENSBookmark: {\n      const stateChange = ensBookmarkAdapter.removeAll(state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case SetENSBookmarkError: {\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n    }\n\n    case UpdateENSBookmark: {\n      return {\n        ...state,\n        error: undefined,\n        loading: true,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport { NavigatorButtonsStateModel } from \"../../models/states/navigator-interfaces\";\n\nexport const getNavigatorButtonsState =\n  createFeatureSelector<NavigatorButtonsStateModel>(\"NavigatorButtonsState\");\n\nexport const getCurrentNavigatorButtonsState = createSelector(\n  getNavigatorButtonsState,\n  (state: NavigatorButtonsStateModel) => state\n);\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport { NavigatorStateModel } from \"../../models/states/navigator-interfaces\";\n\nexport const getNavigatorState =\n  createFeatureSelector<NavigatorStateModel>(\"NavigatorState\");\n\nexport const getCurrentNavigatorState = createSelector(\n  getNavigatorState,\n  (state: NavigatorStateModel) => state\n);\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { PagesStateModel } from '../../models/states/pages-interfaces';\n\nexport const getPagesState =\n  createFeatureSelector<PagesStateModel>('PagesState');\n\nexport const getCurrentPagesState = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state\n);\n\nexport const getCurrentNetworkState = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.networkStatus\n);\n\nexport const getCurrentPageVisibility = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.pageVisibility\n);\n\nexport const getCurrentNetworkChainId = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.networkChainCode\n);\n\nexport const getCurrentPageLoadState = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.isPageLoading\n);\n\nexport const getCriticalErrorState = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.criticalErrorOccured\n);\n\nexport const getIpfsState = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.ipfsReady\n);\n\nexport const getIpfsError = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.ipfsError\n);\n\nexport const getCurrentErrorCode = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => {\n    if ('errorCode' in state === false) {\n      return undefined;\n    }\n    if (state.errorCode === undefined) {\n      return undefined;\n    }\n    return state.errorCode;\n  }\n);\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport { UserStateModel } from \"../../models/states/user-interfaces\";\n\nexport const getUserState = createFeatureSelector<UserStateModel>(\"UserState\");\nexport const getUser = createSelector(getUserState, (state) => state);\nexport const getCurrentUserState = createSelector(\n  getUserState,\n  (state: UserStateModel) => state\n);\nexport const getCurrentUser = createSelector(\n  getUser,\n  (state: UserStateModel) => state.user\n);\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport {\n  PaymentModel,\n  PaymentTypesEnum,\n  PaymentStateModel,\n} from '../../models/states/payment-interfaces';\n\nexport const getPaymentStateFull =\n  createFeatureSelector<PaymentStateModel>('PaymentState');\n\nexport const getPaymentState = createSelector(\n  getPaymentStateFull,\n  (state) => state\n);\n\nexport const getEthUsdPrice = createSelector(\n  getPaymentStateFull,\n  (state) => state.ethUsdPrice\n);\n\nexport const getPayments = createSelector(getPaymentStateFull, (state) =>\n  Object.values(state.entities)\n);\n\nexport const getPaymentIds = createSelector(\n  getPaymentStateFull,\n  (state) => state.ids\n);\n\nexport const selectPayment = (id: number) =>\n  createSelector(getPaymentStateFull, (state) => {\n    if ((state.ids as number[]).indexOf(id) <= -1) {\n      return undefined;\n    }\n    return state.entities[id] as PaymentModel;\n  });\n\nexport const getPaymentStateError = createSelector(\n  getPaymentStateFull,\n  (state) => state.error\n);\n\nexport const getPaymentStateLoading = createSelector(\n  getPaymentStateFull,\n  (state) => state.loading\n);\n\nexport const getPendingPayments = createSelector(\n  getPaymentStateFull,\n  (state) => {\n    const pendingPs: PaymentModel[] = [];\n    const ps = Object.values(state.entities) as PaymentModel[];\n    for (const p of ps) {\n      if (p.paymentStatus === false) {\n        pendingPs.push(p);\n      }\n    }\n    if (pendingPs.length <= 0) {\n      return null;\n    }\n    return pendingPs;\n  }\n);\n\nexport const getArchivedPayments = createSelector(\n  getPaymentStateFull,\n  (state) => {\n    const archivedPs: PaymentModel[] = [];\n    const ps = Object.values(state.entities) as PaymentModel[];\n    for (const p of ps) {\n      if (p.archived === true) {\n        archivedPs.push(p);\n      }\n    }\n    if (archivedPs.length <= 0) {\n      return null;\n    }\n    return archivedPs;\n  }\n);\n\nexport const isPaymentDuplicate = (id: string) =>\n  createSelector(getPaymentStateFull, (state) => {\n    if (Object.keys(state.entities).indexOf(id) > -1) {\n      return state.entities[id] as PaymentModel;\n    }\n    return false;\n  });\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSRegistrationStateModel } from '../../models/states/ens-registration-interfaces';\n\nexport const getENSRegistrationStateFull =\n  createFeatureSelector<ENSRegistrationStateModel>('ENSRegistrationState');\n\nexport const getENSRegistrationState = createSelector(\n  getENSRegistrationStateFull,\n  (state) => state\n);\n\nexport const getENSRegistrations = createSelector(\n  getENSRegistrationStateFull,\n  (state) => Object.values(state.entities)\n);\n\nexport const getENSRegistrationIds = createSelector(\n  getENSRegistrationStateFull,\n  (state) => state.ids\n);\n\nexport const selectENSRegistration = (id: number) =>\n  createSelector(getENSRegistrationStateFull, (state) => {\n    if ((state.ids as number[]).indexOf(id) <= -1) {\n      return undefined;\n    }\n    return state.entities[id] as ENSDomainMetadataModel;\n  });\n\nexport const getENSRegistrationStateError = createSelector(\n  getENSRegistrationStateFull,\n  (state) => state.error\n);\n\nexport const getENSRegistrationStateLoading = createSelector(\n  getENSRegistrationStateFull,\n  (state) => state.loading\n);\n\nexport const isENSRegistrationDuplicate = (id: string) =>\n  createSelector(getENSRegistrationStateFull, (state) => {\n    if (Object.keys(state.entities).indexOf(id) > -1) {\n      return state.entities[id] as ENSDomainMetadataModel;\n    }\n    return false;\n  });\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSBookmarkStateModel } from '../../models/states/ens-bookmark-interfaces';\n\nexport const getENSBookmarkStateFull =\n  createFeatureSelector<ENSBookmarkStateModel>('ENSBookmarkState');\n\nexport const getENSBookmarkState = createSelector(\n  getENSBookmarkStateFull,\n  (state) => state\n);\n\nexport const getENSBookmarks = createSelector(\n  getENSBookmarkStateFull,\n  (state) => Object.values(state.entities)\n);\n\nexport const getENSBookmarkIds = createSelector(\n  getENSBookmarkStateFull,\n  (state) => state.ids\n);\n\nexport const selectENSBookmark = (id: number) =>\n  createSelector(getENSBookmarkStateFull, (state) => {\n    if ((state.ids as number[]).indexOf(id) <= -1) {\n      return undefined;\n    }\n    return state.entities[id] as ENSDomainMetadataModel;\n  });\n\nexport const getENSBookmarkStateError = createSelector(\n  getENSBookmarkStateFull,\n  (state) => state.error\n);\n\nexport const getENSBookmarkStateLoading = createSelector(\n  getENSBookmarkStateFull,\n  (state) => state.loading\n);\n\nexport const isENSBookmarkDuplicate = (id: string) =>\n  createSelector(getENSBookmarkStateFull, (state) => {\n    if (Object.keys(state.entities).indexOf(id) > -1) {\n      return state.entities[id] as ENSDomainMetadataModel;\n    }\n    return false;\n  });\n","<div mat-dialog-content>\n  <ng-container *ngIf=\"data.showSpinner === true\">\n    <app-icon\n      *ngIf=\"data.lightColour === true\"\n      [iconSize]=\"data.spinnerSize\"\n      class=\"cos-padding-3\"\n    >\n      <ng-container *ngIf=\"data.customIcon === ''\"> lspin </ng-container>\n      <ng-container *ngIf=\"data.customIcon !== ''\">\n        {{ data.customIcon }}\n      </ng-container>\n    </app-icon>\n    <!-- *ngIf=\"data.lightColour === false\" -->\n    <app-icon [iconSize]=\"data.spinnerSize\" class=\"cos-padding-3\">\n      <ng-container *ngIf=\"data.customIcon === ''\"> spin </ng-container>\n      <ng-container *ngIf=\"data.customIcon !== ''\">\n        {{ data.customIcon }}\n      </ng-container>\n    </app-icon>\n  </ng-container>\n  <div\n    [ngClass]=\"textAlign\"\n    *ngIf=\"data.titleText !== undefined && data.titleText !== ''\"\n    class=\"cos-margin-1 cos-no-margin-top cos-no-margin-left cos-no-margin-right cos-body-0\"\n  >\n    <b>\n      {{ data.titleText | translate }}\n    </b>\n  </div>\n  <div\n    *ngIf=\"data.titleText === undefined || data.titleText === ''\"\n    [ngClass]=\"textAlign\"\n    class=\"cos-margin-1 cos-no-margin-top cos-no-margin-left cos-no-margin-right\"\n  >\n    {{ data.message | translate }}\n  </div>\n  <div\n    [ngClass]=\"textAlign\"\n    *ngIf=\"data.subText !== ''\"\n    class=\"cos-margin-4 cos-no-margin-top cos-no-margin-left cos-no-margin-right\"\n  >\n    {{ data.subText | translate }}\n  </div>\n</div>\n<div\n  mat-dialog-actions\n  [fxLayoutAlign]=\"data.textAlign === 'center' ? 'center center' : 'end center'\"\n>\n  <button (click)=\"goToLink()\" mat-button class=\"cos-body-4\">\n    <b>\n      {{\n        (data.buttonTitle !== undefined && data.buttonTitle !== \"\"\n          ? data.buttonTitle\n          : \"BUTTON.CLOSE\"\n        ) | translate\n      }}\n    </b>\n  </button>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { PagesEnum } from 'src/app/models/states/pages-interfaces';\nimport { PagesFacadeService } from 'src/app/store/facades';\n\n@Component({\n  selector: 'app-generic-dialog',\n  templateUrl: './generic-dialog.component.html',\n  styleUrls: ['./generic-dialog.component.scss'],\n})\nexport class GenericDialogComponent implements OnInit {\n  overlaysCountOnInit = 0;\n  closedByButton = false;\n\n  constructor(\n    protected router: Router,\n    protected pagesFacadeService: PagesFacadeService,\n    public genericDialogRef: MatDialogRef<GenericDialogComponent>,\n    @Inject(MAT_DIALOG_DATA)\n    public data: {\n      message: string;\n      showSpinner?: boolean;\n      lightColour?: boolean;\n      spinnerSize?: number;\n      customIcon?: string;\n      subText?: string;\n      titleText?: string;\n      textAlign?: string;\n      buttonTitle?: string;\n      buttonLink?: string;\n      buttonLinkPageRef?: PagesEnum;\n      goToOnExit?: string;\n      goToOnExitPage?: PagesEnum;\n    }\n  ) {}\n\n  ngOnInit() {\n    this.genericDialogRef.backdropClick().subscribe(() => {\n      if (this.closedByButton === true) {\n        return;\n      }\n      this.closeDialog();\n    });\n    const overlays = document.getElementsByClassName(\n      'cdk-overlay-dark-backdrop'\n    );\n    const wrappers = document.getElementsByClassName(\n      'cdk-global-overlay-wrapper'\n    );\n    this.overlaysCountOnInit = overlays.length;\n    if (overlays.length > 1) {\n      for (let i = 1; i < overlays.length; i++) {\n        overlays[i].remove();\n      }\n      const attr = document.createAttribute('style');\n      attr.value = 'z-index: 1001 !important;';\n      overlays[0].attributes.setNamedItem(attr);\n      const existingAttr =\n        wrappers[wrappers.length - 1].attributes.getNamedItem('style');\n      const newAttr = document.createAttribute('style');\n      newAttr.value = existingAttr.value + ' z-index: 1001 !important;';\n      wrappers[wrappers.length - 1].attributes.setNamedItem(newAttr);\n      return;\n    }\n  }\n\n  closeDialog() {\n    const overlays = document.getElementsByClassName(\n      'cdk-overlay-dark-backdrop'\n    );\n    const wrappers = document.getElementsByClassName(\n      'cdk-global-overlay-wrapper'\n    );\n    if (this.overlaysCountOnInit > 1) {\n      const attr = document.createAttribute('style');\n      attr.value = 'z-index: 1000 !important;';\n      overlays[0].attributes.setNamedItem(attr);\n      const existingAttr =\n        wrappers[wrappers.length - 1].attributes.getNamedItem('style');\n      const newAttr = document.createAttribute('style');\n      newAttr.value = existingAttr.value + ' z-index: 1001 !important;';\n      wrappers[wrappers.length - 1].attributes.setNamedItem(newAttr);\n      this.genericDialogRef.close();\n      return;\n    }\n    if (this.closedByButton === false && this.data.goToOnExit !== undefined) {\n      this.pagesFacadeService.gotoPageRoute(\n        this.data.goToOnExit,\n        this.data.goToOnExitPage\n      );\n    }\n  }\n\n  goToLink() {\n    this.closedByButton = true;\n    if (this.data.buttonLink !== undefined) {\n      this.pagesFacadeService.gotoPageRoute(\n        this.data.buttonLink,\n        this.data.buttonLinkPageRef\n      );\n    }\n    this.genericDialogRef.close();\n  }\n\n  get textAlign() {\n    if (this.data.textAlign === '') {\n      return '';\n    } else if (this.data.textAlign === 'right') {\n      return 'cos-right-text';\n    } else if (this.data.textAlign === 'center') {\n      return 'cos-center-text';\n    }\n  }\n}\n","import {\n  AfterViewChecked,\n  Component,\n  Input,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport { from, interval, of, Subject } from 'rxjs';\nimport { map, switchMap, takeUntil } from 'rxjs/operators';\nimport { infiniteLoopedIcons } from 'src/app/configurations';\nimport { NonceTypesEnum } from 'src/app/models/states/wallet-interfaces';\nimport { IconRegistryService, WalletService } from 'src/app/services';\n\ndeclare const APNG: any;\n\n@Component({\n  selector: 'app-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss'],\n})\nexport class IconComponent implements OnDestroy, AfterViewChecked {\n  @Input() iconSize = 24;\n  @ViewChild('icon', { static: false }) icon: any;\n  isVisible = false;\n  setIcon;\n  iconsRegistry;\n  iconAnimation;\n  checkIconSubscription;\n  iconId;\n\n  constructor(\n    public iconRegistryService: IconRegistryService,\n    public walletService: WalletService\n  ) {\n    this.iconsRegistry = this.iconRegistryService.injectCustomIcons();\n    this.iconId = walletService.produceNonce(NonceTypesEnum.SERIAL);\n    const stopCheck: Subject<boolean> = new Subject<boolean>();\n    this.checkIconSubscription = interval(1)\n      .pipe(\n        takeUntil(stopCheck),\n        switchMap((i) => {\n          if (this.icon === undefined) {\n            return of(false);\n          }\n          if (\n            'nativeElement' in this.icon === false ||\n            this.icon.nativeElement.innerText === ''\n          ) {\n            return of(false);\n          }\n          this.setIcon = this.icon.nativeElement.innerText.replaceAll(' ', '');\n          const canvas = document.getElementById(\n            'canvas-icon-' + this.setIcon + this.iconId\n          ) as HTMLCanvasElement;\n          if (canvas === null) {\n            return of(false);\n          }\n          return from(\n            APNG.parseURL('../../../' + this.iconsRegistry[this.setIcon])\n          );\n        }),\n        map((apng: any) => {\n          if (apng === false) {\n            return;\n          }\n          const canvas = document.getElementById(\n            'canvas-icon-' + this.setIcon + this.iconId\n          ) as HTMLCanvasElement;\n          canvas.width = apng.width;\n          canvas.height = apng.height;\n          this.iconAnimation = apng;\n          this.iconAnimation.addContext(canvas.getContext('2d'));\n          this.playIcon();\n          stopCheck.next(false);\n          stopCheck.complete();\n          return;\n        })\n      )\n      .subscribe();\n  }\n\n  playIcon() {\n    this.iconAnimation.play();\n    if (infiniteLoopedIcons.indexOf(this.setIcon) > -1) {\n      return;\n    }\n    setTimeout(() => {\n      this.iconAnimation.rewind();\n    }, this.iconAnimation.frames.length * 25);\n    return;\n  }\n\n  ngAfterViewChecked() {\n    if (this.iconAnimation === undefined && this.icon !== undefined) {\n      return;\n    }\n\n    if (\n      this.isVisible == false &&\n      this.icon.nativeElement.offsetParent != null\n    ) {\n      this.isVisible = true;\n      this.playIcon();\n    } else if (\n      this.isVisible == true &&\n      this.icon.nativeElement.offsetParent == null\n    ) {\n      this.isVisible = false;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.checkIconSubscription) {\n      this.checkIconSubscription.unsubscribe();\n      this.checkIconSubscription = undefined;\n    }\n  }\n}\n","<div #icon style=\"overflow: hidden; width: 0; height: 0\">\n  <ng-content></ng-content>\n</div>\n<div\n  id=\"canvas-icon-container\"\n  class=\"co-icon\"\n  [style.height]=\"iconSize + 'px'\"\n  [style.width]=\"iconSize + 'px'\"\n>\n  <canvas\n    id=\"{{ 'canvas-icon-' + setIcon + iconId }}\"\n    [style.height]=\"iconSize + 'px'\"\n    [style.width]=\"iconSize + 'px'\"\n  >\n  </canvas>\n</div>\n","import { Subject } from \"rxjs\";\n\nexport class BootController {\n  private static instance: BootController;\n  private _reboot: Subject<boolean> = new Subject();\n  private reboot$ = this._reboot.asObservable();\n\n  static getbootControl() {\n    if (!BootController.instance) {\n      BootController.instance = new BootController();\n    }\n    return BootController.instance;\n  }\n\n  public watchReboot() {\n    return this.reboot$;\n  }\n\n  public restart() {\n    this._reboot.next(true);\n  }\n}\n","export const environment = { production: false, development: false, deployed: false, test: true, local: false, chrome: false, defaultChain: 'ropsten', baseUrl: 'http://localhost:4200', validChainIds: { '3': 'ropsten', '1': 'homestead', }, networks: { ropsten: { networkId: 'ropsten', networkName: 'Ropsten Testnet', chainId: 3, providerKey: '8R44ckgzRQzE9kFCtp7QtGQHU6JcAbdy', ensApp: 'https://app.ens.domains', ensMetadataAPI: 'https://metadata.ens.domains/ropsten/0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85/', ensGraphQLAPI: 'https://api.thegraph.com/subgraphs/name/ensdomains/ensropsten', }, homestead: { networkId: 'homestead', networkName: 'Mainnet', chainId: 1, providerKey: '8R44ckgzRQzE9kFCtp7QtGQHU6JcAbdy', ensApp: 'https://app.ens.domains', ensMetadataAPI: 'https://metadata.ens.domains/mainnet/0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85/', ensGraphQLAPI: 'https://api.thegraph.com/subgraphs/name/ensdomains/ens', }, }, };\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { NotFoundComponent } from './pages/not-found';\nimport { PathResolveService } from './services';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'bootstrap',\n    pathMatch: 'full',\n  },\n  {\n    path: 'bootstrap',\n    loadChildren: () =>\n      import('./modules/bootstrap.module').then((m) => m.BootstrapModule),\n  },\n  {\n    path: 'home',\n    loadChildren: () =>\n      import('./modules/home.module').then((m) => m.HomeModule),\n  },\n  {\n    path: 'canvas',\n    loadChildren: () =>\n      import('./modules/canvas.module').then((m) => m.CanvasModule),\n  },\n  {\n    path: 'domain/:domain',\n    loadChildren: () =>\n      import('./modules/domain.module').then((m) => m.DomainModule),\n  },\n  {\n    path: 'profile/:user',\n    loadChildren: () =>\n      import('./modules/profile.module').then((m) => m.ProfileModule),\n  },\n  {\n    path: 'checkout',\n    loadChildren: () =>\n      import('./modules/checkout.module').then((m) => m.CheckoutModule),\n  },\n  {\n    path: 'checkout/:serial',\n    loadChildren: () =>\n      import('./modules/checkout.module').then((m) => m.CheckoutModule),\n  },\n  {\n    path: '**',\n    resolve: {\n      path: PathResolveService,\n    },\n    loadChildren: () =>\n      import('./modules/not-found.module').then((m) => m.NotFoundModule),\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","export enum NetworkStatusEnum {\n\tOFFLINE,\n\tONLINE,\n}\n","<div\n  *ngIf=\"(pageLoadingState | async) === true\"\n  class=\"co-progress-bar cos-fluid-width cos-pos-fixed cos-pos-top-reset\"\n>\n  <mat-progress-bar\n    class=\"cos-main-progress-bar\"\n    mode=\"indeterminate\"\n    [value]=\"0\"\n  ></mat-progress-bar>\n</div>\n<div [style.height]=\"getHeight()\">\n  <router-outlet> </router-outlet>\n</div>\n","import {\n  Component,\n  OnInit,\n  ViewChild,\n  HostListener,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport { MatTab } from '@angular/material/tabs';\nimport { Router } from '@angular/router';\nimport { PagesFacadeService } from './store/facades/pages.facades';\nimport { NetworkStatusEnum } from './models/states/pages-interfaces/network-status.enum';\nimport { IconRegistryService, UserSessionService } from './services';\nimport { of } from 'rxjs';\n\nconst globalAny: any = global;\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild('navigation', { static: true }) navigation: MatTab;\n\n  @HostListener('window:online', ['$event'])\n  onNetworkOnline(target) {\n    this.pagesFacade.newNetworkState({\n      networkStatus: NetworkStatusEnum.ONLINE,\n    });\n  }\n\n  @HostListener('window:offline', ['$event'])\n  onNetworkOffline(target) {\n    this.pagesFacade.newNetworkState({\n      networkStatus: NetworkStatusEnum.OFFLINE,\n    });\n  }\n\n  constructor(\n    protected router: Router,\n    protected userSessionService: UserSessionService,\n    protected iconsRegistryService: IconRegistryService,\n    protected pagesFacade: PagesFacadeService\n  ) {}\n\n  ngOnInit() {\n    const cId = this.userSessionService.getDefaultChainId();\n    this.iconsRegistryService.perloadCustomIcons();\n    this.pagesFacade.setNetworkChainCode(cId, false);\n  }\n\n  ngOnDestroy() {}\n\n  ngAfterViewInit() {\n    if (navigator.onLine === true) {\n      this.pagesFacade.newNetworkState({\n        networkStatus: NetworkStatusEnum.ONLINE,\n      });\n    } else {\n      this.pagesFacade.newNetworkState({\n        networkStatus: NetworkStatusEnum.OFFLINE,\n      });\n    }\n  }\n\n  getHeight() {\n    return window.innerHeight + 'px';\n  }\n\n  get pageLoadingState() {\n    if (this.pagesFacade === undefined) {\n      return of(true);\n    }\n    return this.pagesFacade.pageLoadingState$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NavigatorStateModel } from '../../models/states/navigator-interfaces';\n\n@Injectable()\nexport class NavigatorEffects {\n  constructor(\n    private actions$: Actions,\n    public store: Store<NavigatorStateModel>\n  ) {}\n}\n","import { of } from 'rxjs';\nimport { select, Store } from '@ngrx/store';\nimport { HostListener, Injectable, NgZone } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n  Actions,\n  createEffect,\n  ofType,\n  ROOT_EFFECTS_INIT,\n} from '@ngrx/effects';\nimport {\n  Router,\n  ActivatedRoute,\n  NavigationStart,\n  NavigationEnd,\n  NavigationError,\n} from '@angular/router';\nimport {\n  GotoPageRoute,\n  PageGotoRoute,\n  PagesNetworkOfflineStateInvoke,\n  PagesNetworkStateSet,\n  PagesSetChainCode,\n  PagesSetCriticalError,\n  PagesSetVisibility,\n  SetPageChainCode,\n  SetPagesCriticalError,\n  SetPagesNetworkState,\n  SetPagesNetworkStateOffline,\n  UserRemove,\n} from '../actions';\nimport { getCurrentPagesState, getCurrentUser } from '../selectors';\nimport {\n  NetworkStatusEnum,\n  PagesStateModel,\n} from '../../models/states/pages-interfaces';\nimport { BootController } from '../../../boot-control';\nimport { PagesFacadeService } from '../facades';\nimport { GenericDialogComponent } from '../../widgets/generic-dialog';\nimport { environment } from '../../../environments/environment';\nimport { UserService, UserSessionService } from '../../services';\nimport {\n  catchError,\n  delay,\n  filter,\n  map,\n  switchMap,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators';\n\nconst globalAny: any = global;\n\n@Injectable()\nexport class PagesEffects {\n  constructor(\n    protected actions$: Actions,\n    protected route: Router,\n    protected activatedRoute: ActivatedRoute,\n    protected store: Store<PagesStateModel>,\n    protected userSessionService: UserSessionService,\n    protected pagesFacade: PagesFacadeService,\n    protected userService: UserService,\n    public dialog: MatDialog,\n    public ngZone: NgZone\n  ) {\n    document.addEventListener(\n      'visibilitychange',\n      () => {\n        if (document.hidden) {\n          this.store.dispatch(new PagesSetVisibility(false));\n        } else {\n          this.store.dispatch(new PagesSetVisibility(true));\n        }\n      },\n      false\n    );\n  }\n\n  init$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ROOT_EFFECTS_INIT),\n        switchMap((p) => {\n          return this.route.events.pipe(\n            takeUntil(\n              this.ngZone.runOutsideAngular(() => {\n                return BootController.getbootControl().watchReboot();\n              })\n            )\n          );\n        }),\n        map((e: any) => {\n          if (e instanceof NavigationStart) {\n            if ((e as NavigationStart).url !== '/') {\n              this.pagesFacade.showLoadingProgressBar();\n            }\n          }\n          if (e instanceof NavigationEnd) {\n            setTimeout(() => {\n              this.pagesFacade.hideLoadingProgressBar();\n            }, 1500);\n          }\n          if (e instanceof NavigationError) {\n            setTimeout(() => {\n              this.pagesFacade.hideLoadingProgressBar();\n            }, 1500);\n          }\n          if (globalAny.canvasProvider === undefined) {\n            const chainId =\n              environment.networks[environment.defaultChain].chainId;\n            this.createProvider(chainId);\n          }\n        })\n      ),\n    { dispatch: false }\n  );\n\n  networkStatus$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PagesNetworkStateSet>(SetPagesNetworkState),\n        map((networkState) => {\n          if (\n            networkState.payload.networkStatus === NetworkStatusEnum.OFFLINE\n          ) {\n            this.store.dispatch(new PagesNetworkOfflineStateInvoke());\n          }\n        }),\n        catchError((error) => {\n          return of(false);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  networkStatusOffline$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PagesNetworkOfflineStateInvoke>(SetPagesNetworkStateOffline),\n        withLatestFrom(this.store.pipe(select(getCurrentPagesState)) as any),\n        map((networkAndPageState) => {\n          const [network, pageState] = networkAndPageState;\n          if (this.dialog.openDialogs.length > 0) {\n            return;\n          }\n          return;\n        }),\n        catchError((error) => {\n          return of(false);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  networkChangedId$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PagesSetChainCode>(SetPageChainCode),\n        withLatestFrom(\n          this.store.pipe(select(getCurrentPagesState)),\n          this.store.pipe(select(getCurrentUser))\n        ),\n        delay(250),\n        map((networkAndPageState) => {\n          const [action, pageState, userData] = networkAndPageState;\n          if (\n            action.payload === undefined ||\n            action.payload in environment.validChainIds === false ||\n            action.payload !==\n              environment.networks[environment.defaultChain].chainId\n          ) {\n            this.ngZone.run(() => {\n              const dialogRef = this.dialog.open(GenericDialogComponent, {\n                data: {\n                  message: 'GENERIC.NETWORK_CHANGED_INCOMPATIBLE',\n                },\n                panelClass: 'cos-generic-dialog',\n              });\n            });\n            this.store.dispatch(new UserRemove());\n            return;\n          }\n          this.createProvider(action.payload);\n          return;\n        })\n      ),\n    { dispatch: false }\n  );\n\n  pageCriticalError$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PagesSetCriticalError>(SetPagesCriticalError),\n        filter((action) => action.redirect === true),\n        map((action) => {\n          this.route.navigateByUrl('not-found');\n          return;\n        }),\n        catchError((error) => {\n          return of(false);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  gotoPageRoute$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PageGotoRoute>(GotoPageRoute),\n        map((route) => {\n          if (route.payload.route !== 'not-found') {\n            this.pagesFacade.setPageCriticalError(false, false);\n          }\n          this.route.navigateByUrl(route.payload.route);\n          return;\n        }),\n        catchError((error) => {\n          return of(false);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  createProvider(chainId: number) {\n    const newProvider = this.userSessionService.getUserSessionProvider(chainId);\n    globalAny.chainId = chainId;\n    globalAny.canvasProvider = newProvider;\n  }\n}\n","import { of } from 'rxjs';\nimport { Injectable, NgZone } from '@angular/core';\nimport {\n  Actions,\n  ofType,\n  ROOT_EFFECTS_INIT,\n  createEffect,\n} from '@ngrx/effects';\nimport { map, switchMap, catchError, delay } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { Router } from '@angular/router';\nimport {\n  TranslationService,\n  TrezorService,\n  UserService,\n  UserSessionService,\n} from '../../services';\nimport {\n  RegisterUser,\n  RemoveUser,\n  UserAdd,\n  UserErrorSet,\n  UserRegister,\n  UserRemove,\n} from '../actions';\nimport { UserModel } from '../../models/states/user-interfaces';\nimport { UserStoreErrorsEnum } from '../../models/error-enums';\nimport { MatDialog } from '@angular/material/dialog';\nimport { WalletTypesEnum } from '../../models/states/wallet-interfaces';\nimport { MetamaskService } from '../../services/metamask/metamask.service';\nimport { LedgerService } from '../../services/ledger/ledger.service';\nimport { GenericDialogComponent } from '../../widgets/generic-dialog';\n\nconst globalAny: any = global;\n\n@Injectable()\nexport class UserEffects {\n  constructor(\n    private actions$: Actions,\n    public route: Router,\n    public userService: UserService,\n    public translationService: TranslationService,\n    public userSessionService: UserSessionService,\n    public metamaskService: MetamaskService,\n    public trezorService: TrezorService,\n    public ledgerService: LedgerService,\n    public store: Store<UserModel>,\n    public ngZone: NgZone,\n    public dialog: MatDialog\n  ) {}\n\n  init$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ROOT_EFFECTS_INIT),\n        map((r) => {\n          const timeNow = new Date().getTime();\n          const userSessionStored = this.userSessionService.loadUserSession();\n          if (userSessionStored === undefined || userSessionStored === null) {\n            return;\n          }\n          const userData = JSON.parse(userSessionStored) as UserModel;\n          const defaultChainId = this.userSessionService.getDefaultChainId();\n          if (userData.connectType === WalletTypesEnum.METAMASK) {\n            this.metamaskService.chainChangedDetectionDaemon();\n          }\n          if (\n            userData.connectType === WalletTypesEnum.METAMASK &&\n            this.metamaskService.getChainId() != defaultChainId\n          ) {\n            const dialogRef = this.dialog.open(GenericDialogComponent, {\n              data: {\n                message: 'GENERIC.NETWORK_CHANGED_INCOMPATIBLE',\n              },\n              panelClass: 'cos-generic-dialog',\n            });\n            this.store.dispatch(new UserRemove());\n            return;\n          }\n          // ALLOW THE USER TO \"QUIT SESSION\" through logout button or \"change\" button on checkout\n          this.store.dispatch(\n            new UserAdd(JSON.parse(userSessionStored as string))\n          );\n        })\n      ),\n    { dispatch: false }\n  );\n\n  userRemove$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<UserRemove>(RemoveUser),\n        map((action) => {\n          this.userSessionService.quitUserSession();\n        })\n      ),\n    { dispatch: false }\n  );\n\n  userRegister$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<UserRegister>(RegisterUser),\n        delay(1000),\n        switchMap((action) => {\n          const timeNow = new Date().getTime();\n          const defaultChainId = this.userSessionService.getDefaultChainId();\n          if (\n            action.payload.walletType === WalletTypesEnum.METAMASK &&\n            this.metamaskService.getChainId() != defaultChainId\n          ) {\n            this.store.dispatch(new UserRemove());\n            return of(false);\n          }\n          switch (action.payload.walletType) {\n            case WalletTypesEnum.WALLET_CONNECT:\n              {\n                return of([\n                  timeNow,\n                  action.payload.address,\n                  action.payload.walletType,\n                ]);\n              }\n              break;\n            case WalletTypesEnum.METAMASK:\n              {\n                return this.metamaskService.connect(timeNow).pipe(\n                  switchMap((r: any) => {\n                    if (r === false) {\n                      return of(false);\n                    }\n                    return of([timeNow, r, action.payload.walletType]);\n                  })\n                );\n              }\n              break;\n            case WalletTypesEnum.TREZOR:\n              {\n                return this.trezorService.connect(timeNow).pipe(\n                  switchMap((r: any) => {\n                    if (r === false) {\n                      return of(false);\n                    }\n                    return of([timeNow, r, action.payload.walletType]);\n                  })\n                );\n              }\n              break;\n            case WalletTypesEnum.LEDGER:\n              {\n                return this.ledgerService.connect(timeNow).pipe(\n                  switchMap((r: any) => {\n                    if (r === false) {\n                      return of(false);\n                    }\n                    return of([timeNow, r, action.payload.walletType]);\n                  })\n                );\n              }\n              break;\n          }\n        }),\n        map((r: any) => {\n          if (r === false) {\n            this.store.dispatch(\n              new UserErrorSet(UserStoreErrorsEnum.CONNECT_ERROR)\n            );\n            return;\n          }\n          const [timestamp, address, walletType] = r;\n          const userSession = {\n            connectSignature: undefined,\n            timestamp: timestamp,\n            walletAddress: address,\n            originalConnectAddress: address,\n            deviceLanguage: navigator.language || 'en-US',\n            connectType: walletType,\n          } as UserModel;\n          globalAny.chainAccount = userSession;\n          this.store.dispatch(new UserAdd(userSession));\n          if (walletType === WalletTypesEnum.METAMASK) {\n            this.metamaskService.chainChangedDetectionDaemon();\n          }\n          this.userSessionService.saveUserSession(userSession);\n          return;\n        }),\n        catchError((error) => {\n          return of(false);\n        })\n      ),\n    { dispatch: false }\n  );\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  Actions,\n  createEffect,\n  ofType,\n  ROOT_EFFECTS_INIT,\n} from '@ngrx/effects';\nimport {\n  CurrencyExchangeService,\n  CurrencyService,\n  LedgerService,\n  MiscUtilsService,\n  PaymentEffectsService,\n  PaymentErrorService,\n  PaymentService,\n  PaymentStorageService,\n  TranslationService,\n  TrezorService,\n  UserService,\n  WalletService,\n} from '../../services';\nimport {\n  PaymentErrorCodes,\n  PaymentModel,\n  PaymentStateModel,\n  PaymentTypesEnum,\n} from '../../models/states/payment-interfaces';\nimport { PagesFacadeService, UserFacadeService } from '../facades';\nimport { MetamaskService } from '../../services/metamask';\nimport {\n  AddOnePayment,\n  ArchiveAllPayment,\n  CheckPaymentFulfilled,\n  PaymentAddOne,\n  PaymentArchiveAll,\n  PaymentCheckFulfilled,\n  PaymentETHUSDRatesSet,\n  PaymentRemoveOne,\n  PaymentUpsertMany,\n  PaymentUpsertOne,\n  UpsertOnePayment,\n} from '../actions';\nimport {\n  catchError,\n  delayWhen,\n  map,\n  mergeMap,\n  retryWhen,\n  switchMap,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { from, interval, of, Subject, timer } from 'rxjs';\nimport {\n  getCurrentNetworkChainId,\n  getCurrentUser,\n  getPayments,\n} from '../selectors';\nimport { WalletTypesEnum } from 'src/app/models/states/wallet-interfaces';\nimport { BigNumber, utils } from 'ethers';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { generalConfigurations } from 'src/app/configurations';\nimport { WalletConnectService } from 'src/app/services/wallet-connect';\nimport { getTransactionByNonce } from 'find-replacement-tx';\n\nconst globalAny: any = global;\n\n@Injectable()\nexport class PaymentEffects {\n  staticPaymentTranslatedTexts;\n  staticGenericTranslatedTexts;\n  constructor(\n    private actions$: Actions,\n    protected paymentService: PaymentService,\n    protected walletService: WalletService,\n    protected userService: UserService,\n    protected pagesFacade: PagesFacadeService,\n    protected paymentErrorService: PaymentErrorService,\n    protected userFacadeService: UserFacadeService,\n    protected store: Store<PaymentStateModel>,\n    protected translationService: TranslationService,\n    protected currencyService: CurrencyService,\n    protected currencyExchangeService: CurrencyExchangeService,\n    protected metamaskService: MetamaskService,\n    protected walletConnectService: WalletConnectService,\n    protected trezorService: TrezorService,\n    protected paymentStorageService: PaymentStorageService,\n    protected ledgerService: LedgerService,\n    protected miscUtils: MiscUtilsService,\n    protected snackBar: MatSnackBar,\n    protected paymentEffectsService: PaymentEffectsService,\n    protected ngZone: NgZone\n  ) {\n    this.staticPaymentTranslatedTexts =\n      this.translationService.getCacheableLanguagekeys('PAYMENT');\n    this.staticGenericTranslatedTexts =\n      this.translationService.getCacheableLanguagekeys('GENERIC');\n  }\n\n  init$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ROOT_EFFECTS_INIT),\n        switchMap((r) => {\n          const payments = this.paymentStorageService.loadPayments();\n          if (payments !== false) {\n            this.store.dispatch(\n              new PaymentUpsertMany(payments as any as PaymentModel[])\n            );\n          }\n          if (payments === false || payments === null || payments.length <= 0) {\n            return of(false);\n          }\n          for (const p of payments) {\n            if (\n              p.paymentHash !== null &&\n              p.paymentHash !== '' &&\n              p.paymentStatus === false\n            ) {\n              this.store.dispatch(new CheckPaymentFulfilled(p));\n            }\n          }\n          return timer(0, 60000).pipe(\n            switchMap((i) => {\n              return this.currencyExchangeService.getEthUsdPrice();\n            }),\n            map((ce) => {\n              this.store.dispatch(new PaymentETHUSDRatesSet(ce as string));\n            })\n          );\n        })\n      ),\n    { dispatch: false }\n  );\n\n  addPayment$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PaymentAddOne>(AddOnePayment),\n        withLatestFrom(\n          this.store.pipe(select(getPayments)),\n          this.store.pipe(select(getCurrentUser)),\n          this.store.pipe(select(getCurrentNetworkChainId))\n        ),\n        switchMap(([action, payments, user, chainId]: any[]) => {\n          const provider = globalAny.canvasProvider;\n          return this.paymentService.getGasPrice(provider).pipe(\n            switchMap((gasPrice) => {\n              return of([action, user, provider, chainId, gasPrice]);\n            })\n          );\n        }),\n        switchMap(([action, user, provider, chainId, gasPrice]: any[]) => {\n          return this.paymentService\n            .getWalletNonce(provider, user.walletAddress)\n            .pipe(\n              switchMap((nonce) => {\n                return of([action, user, provider, chainId, gasPrice, nonce]);\n              })\n            );\n        }),\n        switchMap(\n          ([action, user, provider, chainId, gasPrice, nonce]: any[]) => {\n            const preparedTx = this.paymentService.prepareTransaction(\n              chainId,\n              nonce,\n              action.payload.paymentMarketAddress,\n              action.payload.paymentGasLimit,\n              gasPrice.gasPrice,\n              action.payload\n            );\n            this.snackBar.open(\n              this.staticGenericTranslatedTexts.PENDING_TRANSACTION_CERATED,\n              'close',\n              {\n                horizontalPosition: 'center',\n                verticalPosition: 'bottom',\n                duration: 5000,\n              }\n            );\n            if (user.connectType === WalletTypesEnum.LEDGER) {\n              const txHex = utils.serializeTransaction(preparedTx);\n              return this.ledgerService.signPayment(txHex).pipe(\n                switchMap((signed: any) => {\n                  const signedPacked = utils.serializeTransaction(preparedTx, {\n                    v: BigNumber.from('0x' + signed.v).toNumber(),\n                    r: '0x' + signed.r,\n                    s: '0x' + signed.s,\n                  });\n                  return from(provider.sendTransaction(signedPacked));\n                }),\n                switchMap((r) => {\n                  return of([action, r, nonce]);\n                })\n              );\n            }\n            if (user.connectType === WalletTypesEnum.WALLET_CONNECT) {\n              const txToFilter = {\n                ...preparedTx,\n                from: user.walletAddress,\n              };\n              delete txToFilter.gasPrice;\n              delete txToFilter.nonce;\n              return this.walletConnectService.signPayment(txToFilter).pipe(\n                switchMap((r) => {\n                  return of([action, r, nonce]);\n                })\n              );\n            }\n            if (user.connectType === WalletTypesEnum.METAMASK) {\n              const txToFilter = {\n                ...preparedTx,\n                from: user.walletAddress,\n              };\n              delete txToFilter.gasPrice;\n              delete txToFilter.nonce;\n              return this.metamaskService.signPayment([txToFilter]).pipe(\n                switchMap((r) => {\n                  return of([action, r, nonce]);\n                })\n              );\n            }\n            if (user.connectType === WalletTypesEnum.TREZOR) {\n              return this.trezorService.signPayment(preparedTx).pipe(\n                switchMap((signed: any) => {\n                  return from(provider.sendTransaction(signed as string));\n                }),\n                switchMap((r) => {\n                  return of([action, r, nonce]);\n                })\n              );\n            }\n          }\n        ),\n        switchMap(([action, hash, nonce]) => {\n          if (hash === false) {\n            this.store.dispatch(new PaymentRemoveOne(action.payload.id));\n            this.snackBar.open(\n              this.staticPaymentTranslatedTexts['PAYMENT_CANCELLED'],\n              'close',\n              {\n                horizontalPosition: 'center',\n                verticalPosition: 'bottom',\n                duration: 15000,\n              }\n            );\n            return of(false);\n          }\n          this.store.dispatch(\n            new PaymentUpsertOne({\n              ...action.payload,\n              paymentStatus: false,\n              paymentHash: hash,\n              paymentNonce: nonce,\n            })\n          );\n          const paymentResolved = new Subject<boolean>();\n          return this.pagesFacade.pageVisibility$.pipe(\n            withLatestFrom(this.store.pipe(select(getPayments))),\n            takeUntil(paymentResolved),\n            map((pvp) => {\n              const [pv, payments] = pvp;\n              const payment = payments[action.payload.id];\n              if (\n                payment &&\n                'paymentStatus' in payment &&\n                payment.paymentStatus === true\n              ) {\n                paymentResolved.next(false);\n                return;\n              }\n              if (pv === true) {\n                this.store.dispatch(\n                  new CheckPaymentFulfilled({\n                    ...action.payload,\n                    paymentHash: hash,\n                    paymentNonce: nonce,\n                  })\n                );\n              }\n            })\n          );\n        })\n      ),\n    { dispatch: false }\n  );\n\n  upsertPayment$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PaymentUpsertOne>(UpsertOnePayment),\n        withLatestFrom(this.store.pipe(select(getPayments))),\n        map(([action, payments]) => {\n          this.paymentStorageService.savePayments([\n            ...payments,\n            action.payload,\n          ]);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  archiveAllPayment$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PaymentArchiveAll>(ArchiveAllPayment),\n        withLatestFrom(this.store.pipe(select(getPayments))),\n        map(([action, payments]) => {\n          this.paymentStorageService.savePayments(payments);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  userCheckPaymentStatus$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<CheckPaymentFulfilled>(PaymentCheckFulfilled),\n        mergeMap((action) => {\n          const hasResolved = new Subject<boolean>();\n          return interval(generalConfigurations.timeToUpdateCheckoutPipe).pipe(\n            takeUntil(hasResolved),\n            switchMap((i) => {\n              const provider = globalAny.canvasProvider;\n              if (provider === undefined) {\n                return of(false);\n              }\n              return from(provider.getBlockNumber()).pipe(\n                switchMap((blockNumber) => {\n                  if (\n                    blockNumber === null ||\n                    blockNumber === false ||\n                    blockNumber === undefined\n                  ) {\n                    throw false;\n                  }\n                  const searchTxFromBlock = (blockNumber as number) - 5;\n                  const tx = {\n                    from: action.payload.paymentPayer,\n                    to: action.payload.paymentPayee,\n                    nonce: action.payload.paymentNonce,\n                  };\n                  return from(\n                    provider.getTransactionReceipt(action.payload.paymentHash)\n                  ).pipe(\n                    switchMap((foundTx) => {\n                      if (foundTx === null || foundTx === false) {\n                        return from(\n                          getTransactionByNonce(\n                            provider,\n                            searchTxFromBlock,\n                            tx.from,\n                            tx.nonce\n                          )\n                        ).pipe(\n                          switchMap((r) => {\n                            if (r === null) {\n                              return of(null);\n                            }\n                            return from(provider.getTransactionReceipt(r.hash));\n                          })\n                        );\n                      }\n                      return of(foundTx);\n                    }),\n                    catchError((e) => {\n                      return of(null);\n                    })\n                  );\n                }),\n                map((r: any) => {\n                  if (r === null || r === undefined) {\n                    return;\n                  }\n                  if (r.status === 0) {\n                    this.store.dispatch(\n                      new PaymentUpsertOne({\n                        id: action.payload.id,\n                        paymentHash: action.payload.paymentHash,\n                        paymentStatus: false,\n                        paymentError: PaymentErrorCodes.PAYMENT_FAILURE,\n                      })\n                    );\n                    hasResolved.next(false);\n                    return;\n                  }\n                  if (\n                    r.status === 1 &&\n                    r.confirmations >=\n                      generalConfigurations.maxConfirmationsUntilTxFinal\n                  ) {\n                    this.store.dispatch(\n                      new PaymentUpsertOne({\n                        id: action.payload.id,\n                        paymentDate:\n                          action.payload.paymentType === PaymentTypesEnum.COMMIT\n                            ? new Date().getTime()\n                            : action.payload.paymentDate,\n                        paymentHash: action.payload.paymentHash,\n                        paymentStatus: true,\n                        paymentError: PaymentErrorCodes.NONE,\n                      })\n                    );\n                    hasResolved.next(false);\n                    return;\n                  }\n                })\n              );\n            })\n          );\n        })\n      ),\n    { dispatch: false }\n  );\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Actions,\n  createEffect,\n  ofType,\n  ROOT_EFFECTS_INIT,\n} from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { ENSBookmarkStateModel } from 'src/app/models/states/ens-bookmark-interfaces';\nimport { BookmarksServiceService } from 'src/app/services/bookmarks';\nimport {\n  AddOneENSBookmark,\n  ENSBookmarkAddOne,\n  ENSBookmarkRemoveOne,\n  ENSBookmarkUpsertOne,\n  RemoveOneENSBookmark,\n  UpsertOneENSBookmark,\n} from '../actions';\nimport { getENSBookmarks } from '../selectors';\n\n@Injectable()\nexport class ENSBookmarkEffects {\n  constructor(\n    private actions$: Actions,\n    protected bookMarkService: BookmarksServiceService,\n    public store: Store<ENSBookmarkStateModel>\n  ) {}\n\n  init$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ROOT_EFFECTS_INIT),\n        map((p) => {\n          const bookmarks = this.bookMarkService.loadBookmarksAndFeed();\n          for (const b of Object.keys(bookmarks)) {\n            this.store.dispatch(\n              new ENSBookmarkAddOne(\n                {\n                  id: bookmarks[b].labelName,\n                  ...bookmarks[b],\n                },\n                false\n              )\n            );\n          }\n        })\n      ),\n    {\n      dispatch: false,\n    }\n  );\n\n  addOneBookmark$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSBookmarkAddOne>(AddOneENSBookmark),\n        filter((action) => action.toSave === true),\n        map((action) => {\n          this.bookMarkService.saveBookmark(action.payload);\n        })\n      ),\n\n    { dispatch: false }\n  );\n\n  removeOneBookmark$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSBookmarkRemoveOne>(RemoveOneENSBookmark),\n        filter((action) => action.toSave === true),\n        withLatestFrom(this.store.pipe(select(getENSBookmarks))),\n        map((state) => {\n          const [action, bookmarks] = state;\n          this.bookMarkService.removeBookmark(bookmarks, action.payload);\n        })\n      ),\n\n    { dispatch: false }\n  );\n\n  upsertOneBookmark$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSBookmarkUpsertOne>(UpsertOneENSBookmark),\n        filter((action) => action.toSave === true),\n        map((action) => {\n          this.bookMarkService.saveBookmark(action.payload);\n        })\n      ),\n\n    { dispatch: false }\n  );\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Actions,\n  createEffect,\n  ofType,\n  ROOT_EFFECTS_INIT,\n} from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { ENSRegistrationStateModel } from 'src/app/models/states/ens-registration-interfaces';\nimport {\n  RegistrationFacilityService,\n  RegistrationServiceService,\n} from 'src/app/services/registration';\nimport {\n  AddOneENSRegistration,\n  ENSRegistrationAddOne,\n  ENSRegistrationRemoveAll,\n  ENSRegistrationUpsertOne,\n  RemoveAllENSRegistration,\n  RemoveOneENSRegistration,\n  UpsertOneENSRegistration,\n} from '../actions';\nimport { getENSRegistrations } from '../selectors';\n\n@Injectable()\nexport class ENSRegistrationEffects {\n  constructor(\n    private actions$: Actions,\n    protected registrationService: RegistrationServiceService,\n    protected registrationFacilityService: RegistrationFacilityService,\n    public store: Store<ENSRegistrationStateModel>\n  ) {}\n\n  init$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ROOT_EFFECTS_INIT),\n        map((p) => {\n          const registrations =\n            this.registrationService.loadRegistrationsAndFeed();\n          for (const b of Object.keys(registrations)) {\n            this.store.dispatch(\n              new ENSRegistrationAddOne(\n                {\n                  id: registrations[b].labelName,\n                  ...registrations[b],\n                },\n                false\n              )\n            );\n          }\n        })\n      ),\n    {\n      dispatch: false,\n    }\n  );\n\n  addOneRegistration$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSRegistrationAddOne>(AddOneENSRegistration),\n        filter((action) => action.toSave === true),\n        map((action) => {\n          this.registrationService.saveRegistrations(action.payload);\n        })\n      ),\n\n    { dispatch: false }\n  );\n\n  removeOneRegistration$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSRegistrationAddOne>(RemoveOneENSRegistration),\n        filter((action) => action.toSave === true),\n        withLatestFrom(this.store.pipe(select(getENSRegistrations))),\n        map((state) => {\n          const [action, registrations] = state;\n          this.registrationService.removeRegistration(\n            registrations,\n            action.payload.labelName\n          );\n        })\n      ),\n\n    { dispatch: false }\n  );\n\n  removeAllRegistration$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSRegistrationRemoveAll>(RemoveAllENSRegistration),\n        map(() => {\n          this.registrationService.removeAllRegistrations();\n        })\n      ),\n\n    { dispatch: false }\n  );\n\n  upsertOneRegistration$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSRegistrationUpsertOne>(UpsertOneENSRegistration),\n        filter((action) => action.toSave === true),\n        map((action) => {\n          this.registrationService.saveRegistrations(action.payload);\n        })\n      ),\n\n    { dispatch: false }\n  );\n}\n","import { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { EffectsModule } from '@ngrx/effects';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport {\n  BrowserModule,\n  HAMMER_GESTURE_CONFIG,\n} from '@angular/platform-browser';\nimport { MatButtonModule } from '@angular/material/button';\nimport {\n  MatDialogModule,\n  MAT_DIALOG_DATA,\n  MatDialogRef,\n} from '@angular/material/dialog';\nimport { RouterModule } from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { Intercept } from './services/intercept/intercept';\nimport { HammerJsConf } from './configurations';\nimport { serviceProviders } from './models';\nimport { NetworkStatusDialogComponent } from './widgets/network-status-dialog';\nimport { GenericDialogModule, TranslationModule } from './modules/miscs';\nimport {\n  ENSBookmarkReducers,\n  ENSRegistrationReducers,\n  NavigatorButtonsReducers,\n  NavigatorReducers,\n  PagesReducers,\n  PaymentReducers,\n  UserReducers,\n} from './store/reducers';\nimport {\n  ENSBookmarkEffects,\n  NavigatorEffects,\n  PagesEffects,\n  PaymentEffects,\n  UserEffects,\n} from './store/effects';\nimport { environment } from '../environments/environment';\nimport { ENSRegistrationEffects } from './store/effects';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\n@NgModule({\n  declarations: [AppComponent, NetworkStatusDialogComponent],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    RouterModule,\n    AppRoutingModule,\n    FlexLayoutModule,\n    MatProgressBarModule,\n    MatSnackBarModule,\n    TranslationModule,\n    StoreModule.forRoot(\n      {\n        UserState: UserReducers,\n        NavigatorState: NavigatorReducers,\n        PagesState: PagesReducers,\n        PaymentState: PaymentReducers,\n        NavigatorButtonsState: NavigatorButtonsReducers,\n        ENSRegistrationState: ENSRegistrationReducers,\n        ENSBookmarkState: ENSBookmarkReducers,\n      },\n      {\n        runtimeChecks: {\n          strictActionImmutability: false,\n        },\n      }\n    ),\n    EffectsModule.forRoot([\n      UserEffects,\n      NavigatorEffects,\n      PagesEffects,\n      PaymentEffects,\n      ENSRegistrationEffects,\n      ENSBookmarkEffects,\n    ]),\n    environment.deployed === true\n      ? []\n      : StoreDevtoolsModule.instrument({\n          maxAge: 200,\n        }),\n    MatDialogModule,\n    MatButtonModule,\n    GenericDialogModule,\n  ],\n  exports: [\n    NetworkStatusDialogComponent,\n    BrowserModule,\n    HttpClientModule,\n    RouterModule,\n    BrowserAnimationsModule,\n    FlexLayoutModule,\n    TranslationModule,\n    MatSnackBarModule,\n    GenericDialogModule,\n  ],\n  providers: [\n    ...serviceProviders,\n    {\n      provide: HAMMER_GESTURE_CONFIG,\n      useClass: HammerJsConf,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: Intercept,\n      multi: true,\n    },\n    { provide: MAT_DIALOG_DATA, useValue: {} },\n    { provide: MatDialogRef, useValue: {} },\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [NetworkStatusDialogComponent],\n  schemas: [NO_ERRORS_SCHEMA],\n})\nexport class AppModule {}\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app/app.module';\nimport { BehaviorSubject } from 'rxjs';\nimport { BootController } from './boot-control';\n\ndeclare global {\n  interface Window {\n    global: any;\n    process: any;\n    ethereumProvider: any;\n    etherscanProvider: any;\n  }\n}\n(window as any).global = window;\n(window as any).process = window;\n(window as any).process.browser = true;\n(window as any).process.version = '';\n(window as any).process.versions = { node: false };\n(window as any).global.appIsPaused = new BehaviorSubject(false);\n\nif (environment.production === true) {\n  enableProdMode();\n}\n\nexport function main(): any {\n  return platformBrowserDynamic().bootstrapModule(AppModule);\n}\n\nlet mainApp;\nif (module['hot']) {\n  module['hot'].accept();\n}\nconst boot = BootController.getbootControl()\n  .watchReboot()\n  .subscribe(() => {\n    if (mainApp) {\n      if (window['ngRef']) {\n        window['ngRef'].destroy();\n      }\n      window['ngRef'] = mainApp;\n    }\n    mainApp = main().catch((err) => console.error('Bootstrap error:', err));\n  });\nBootController.getbootControl().restart();\n"],"sourceRoot":"webpack:///","file":"main.8e6db530a1c7d585.js"}